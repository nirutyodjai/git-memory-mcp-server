#!/usr/bin/env node
/**
 * Remove Excess Servers Script
 * ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö MCP Servers ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ scale down
 */

const { exec } = require('child_process');
const fs = require('fs').promises;
const path = require('path');
const http = require('http');

class ExcessServerRemover {
    constructor() {
        this.removedServers = [];
        this.failedRemovals = [];
    }
    
    /**
     * ‡∏•‡∏ö servers ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô
     */
    async removeServers(count) {
        console.log(`üóëÔ∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö ${count} MCP Servers ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô...`);
        
        try {
            // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ servers ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            const existingServers = await this.getExistingServers();
            
            if (existingServers.length === 0) {
                console.log('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö servers ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö');
                return {
                    success: true,
                    removed: 0,
                    message: 'No servers to remove'
                };
            }
            
            // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å servers ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô - LIFO)
            const serversToRemove = this.selectServersToRemove(existingServers, count);
            
            console.log(`üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ${serversToRemove.length} servers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö`);
            
            // ‡∏•‡∏ö servers ‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
            for (let i = 0; i < serversToRemove.length; i++) {
                const server = serversToRemove[i];
                console.log(`üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö server ${i + 1}/${serversToRemove.length}: ${server.id}`);
                
                try {
                    await this.removeSingleServer(server);
                    this.removedServers.push(server);
                    console.log(`‚úÖ ‡∏•‡∏ö ${server.id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
                } catch (error) {
                    console.error(`‚ùå ‡∏•‡∏ö ${server.id} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:`, error.message);
                    this.failedRemovals.push({ server, error: error.message });
                }
                
                // ‡∏£‡∏≠ 500ms ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
                if (i < serversToRemove.length - 1) {
                    await new Promise(resolve => setTimeout(resolve, 500));
                }
            }
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå servers.json
            await this.updateServersList();
            
            const successCount = this.removedServers.length;
            const failCount = this.failedRemovals.length;
            
            console.log(`\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏ö:`);
            console.log(`   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successCount}`);
            console.log(`   ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${failCount}`);
            
            if (this.failedRemovals.length > 0) {
                console.log(`\n‚ö†Ô∏è  Servers ‡∏ó‡∏µ‡πà‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`);
                this.failedRemovals.forEach(({ server, error }) => {
                    console.log(`   - ${server.id}: ${error}`);
                });
            }
            
            return {
                success: failCount === 0,
                removed: successCount,
                failed: failCount,
                removedServers: this.removedServers,
                failedRemovals: this.failedRemovals
            };
            
        } catch (error) {
            console.error('‚ùå Error removing servers:', error.message);
            return {
                success: false,
                error: error.message,
                removed: this.removedServers.length
            };
        }
    }
    
    /**
     * ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å servers ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
     */
    selectServersToRemove(servers, count) {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° startTime (‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô) ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        const sortedServers = servers
            .filter(server => server.status !== 'removing') // ‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å servers ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
            .sort((a, b) => new Date(b.startTime || 0) - new Date(a.startTime || 0))
            .slice(0, Math.min(count, servers.length));
        
        return sortedServers;
    }
    
    /**
     * ‡∏•‡∏ö server ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
     */
    async removeSingleServer(server) {
        const { id, port, pid } = server;
        
        try {
            // 1. ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì graceful shutdown ‡πÑ‡∏õ‡∏¢‡∏±‡∏á server
            if (port) {
                await this.sendShutdownSignal(port);
                await new Promise(resolve => setTimeout(resolve, 2000)); // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            }
            
            // 2. ‡∏Ü‡πà‡∏≤ process ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
            if (pid) {
                await this.killProcess(pid);
            }
            
            // 3. ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
            await this.cleanupServerFiles(id);
            
            console.log(`üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î ${id} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô`);
            
        } catch (error) {
            throw new Error(`Failed to remove server ${id}: ${error.message}`);
        }
    }
    
    /**
     * ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì shutdown ‡πÑ‡∏õ‡∏¢‡∏±‡∏á server
     */
    async sendShutdownSignal(port) {
        return new Promise((resolve) => {
            const req = http.get(`http://localhost:${port}/shutdown`, (res) => {
                console.log(`üì° ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì shutdown ‡πÑ‡∏õ‡∏¢‡∏±‡∏á port ${port}`);
                resolve();
            });
            
            req.on('error', () => {
                // ‡πÑ‡∏°‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ñ‡πâ‡∏≤ request ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ server ‡∏≠‡∏≤‡∏à‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
                resolve();
            });
            
            req.setTimeout(3000, () => {
                req.destroy();
                resolve();
            });
        });
    }
    
    /**
     * ‡∏Ü‡πà‡∏≤ process
     */
    async killProcess(pid) {
        return new Promise((resolve, reject) => {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ process ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            exec(`tasklist /FI "PID eq ${pid}"`, (error, stdout) => {
                if (error || !stdout.includes(pid.toString())) {
                    console.log(`üîç Process ${pid} ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
                    resolve();
                    return;
                }
                
                // ‡∏Ü‡πà‡∏≤ process
                exec(`taskkill /PID ${pid} /F`, (killError, killStdout, killStderr) => {
                    if (killError) {
                        console.warn(`‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ü‡πà‡∏≤ process ${pid}: ${killError.message}`);
                        // ‡πÑ‡∏°‡πà reject ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞ process ‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
                    } else {
                        console.log(`üíÄ ‡∏Ü‡πà‡∏≤ process ${pid} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
                    }
                    resolve();
                });
            });
        });
    }
    
    /**
     * ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á server
     */
    async cleanupServerFiles(serverId) {
        try {
            // ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå server (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            const serverDir = path.join(__dirname, 'servers', serverId);
            try {
                await fs.rmdir(serverDir, { recursive: true });
                console.log(`üóÇÔ∏è  ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ${serverDir}`);
            } catch (error) {
                // ‡πÑ‡∏°‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
            }
            
            // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå log (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            const logFile = path.join(__dirname, 'logs', `${serverId}.log`);
            try {
                await fs.unlink(logFile);
                console.log(`üìÑ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå log ${logFile}`);
            } catch (error) {
                // ‡πÑ‡∏°‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå log
            }
            
            // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå config (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            const configFile = path.join(__dirname, 'configs', `${serverId}.json`);
            try {
                await fs.unlink(configFile);
                console.log(`‚öôÔ∏è  ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå config ${configFile}`);
            } catch (error) {
                // ‡πÑ‡∏°‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå config
            }
            
        } catch (error) {
            console.warn(`‚ö†Ô∏è  ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå ${serverId} ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå: ${error.message}`);
        }
    }
    
    /**
     * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• servers ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
     */
    async getExistingServers() {
        try {
            const serversFile = path.join(__dirname, 'servers.json');
            const data = await fs.readFile(serversFile, 'utf8');
            return JSON.parse(data);
        } catch (error) {
            console.warn('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå servers.json');
            return [];
        }
    }
    
    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ servers
     */
    async updateServersList() {
        try {
            const existingServers = await this.getExistingServers();
            const removedIds = this.removedServers.map(s => s.id);
            
            // ‡∏Å‡∏£‡∏≠‡∏á servers ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
            const updatedServers = existingServers.filter(server => 
                !removedIds.includes(server.id)
            );
            
            const serversFile = path.join(__dirname, 'servers.json');
            await fs.writeFile(serversFile, JSON.stringify(updatedServers, null, 2));
            
            console.log(`üíæ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå servers.json (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${updatedServers.length} servers)`);
        } catch (error) {
            console.error('‚ùå Error updating servers list:', error.message);
        }
    }
    
    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ server
     */
    async checkServerStatus(port) {
        return new Promise((resolve) => {
            const req = http.get(`http://localhost:${port}/health`, (res) => {
                let data = '';
                res.on('data', chunk => data += chunk);
                res.on('end', () => {
                    try {
                        const status = JSON.parse(data);
                        resolve({ running: true, status });
                    } catch (error) {
                        resolve({ running: false, error: 'Invalid response' });
                    }
                });
            });
            
            req.on('error', () => {
                resolve({ running: false, error: 'Connection failed' });
            });
            
            req.setTimeout(3000, () => {
                req.destroy();
                resolve({ running: false, error: 'Timeout' });
            });
        });
    }
    
    /**
     * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ processes ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
     */
    async getRunningProcesses() {
        return new Promise((resolve, reject) => {
            exec('tasklist /FO CSV', (error, stdout, stderr) => {
                if (error) {
                    reject(error);
                    return;
                }
                
                try {
                    const lines = stdout.split('\n').slice(1); // ‡∏Ç‡πâ‡∏≤‡∏° header
                    const processes = lines
                        .filter(line => line.trim())
                        .map(line => {
                            const parts = line.split(',').map(part => part.replace(/"/g, ''));
                            return {
                                name: parts[0],
                                pid: parseInt(parts[1]),
                                sessionName: parts[2],
                                sessionNumber: parts[3],
                                memUsage: parts[4]
                            };
                        })
                        .filter(proc => proc.name && proc.name.toLowerCase().includes('node'));
                    
                    resolve(processes);
                } catch (parseError) {
                    reject(parseError);
                }
            });
        });
    }
    
    /**
     * ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏ö
     */
    getSummary() {
        return {
            totalAttempted: this.removedServers.length + this.failedRemovals.length,
            successful: this.removedServers.length,
            failed: this.failedRemovals.length,
            successRate: this.removedServers.length + this.failedRemovals.length > 0 ? 
                (this.removedServers.length / (this.removedServers.length + this.failedRemovals.length)) * 100 : 0,
            removedServers: this.removedServers.map(s => ({
                id: s.id,
                port: s.port,
                pid: s.pid
            })),
            failedRemovals: this.failedRemovals.map(f => ({
                id: f.server.id,
                error: f.error
            }))
        };
    }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å command line
if (require.main === module) {
    const count = parseInt(process.argv[2]) || 10;
    
    console.log('üóëÔ∏è  Excess Server Remover');
    console.log('=' .repeat(50));
    console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô servers ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö: ${count}`);
    
    const remover = new ExcessServerRemover();
    
    remover.removeServers(count)
        .then(result => {
            const summary = remover.getSummary();
            
            console.log('\nüìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏ö:');
            console.log(`   üéØ ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡∏ö: ${summary.totalAttempted}`);
            console.log(`   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${summary.successful}`);
            console.log(`   ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${summary.failed}`);
            console.log(`   üìä ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${summary.successRate.toFixed(1)}%`);
            
            if (summary.successful > 0) {
                console.log('\n‚úÖ Servers ‡∏ó‡∏µ‡πà‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:');
                summary.removedServers.forEach(server => {
                    console.log(`   - ${server.id} (port: ${server.port}, pid: ${server.pid})`);
                });
            }
            
            if (summary.failed > 0) {
                console.log('\n‚ùå Servers ‡∏ó‡∏µ‡πà‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:');
                summary.failedRemovals.forEach(failure => {
                    console.log(`   - ${failure.id}: ${failure.error}`);
                });
            }
            
            if (result.success) {
                console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏•‡∏ö servers ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå');
                process.exit(0);
            } else {
                console.log('\n‚ö†Ô∏è  ‡∏Å‡∏≤‡∏£‡∏•‡∏ö servers ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô');
                process.exit(1);
            }
        })
        .catch(error => {
            console.error('üí• Unexpected error:', error.message);
            process.exit(1);
        });
}

module.exports = ExcessServerRemover;