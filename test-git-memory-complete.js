const { spawn } = require('child_process');
const { EventEmitter } = require('events');

// MCP Client implementation
class MCPClient extends EventEmitter {
    constructor() {
        super();
        this.process = null;
        this.requestId = 0;
        this.pendingRequests = new Map();
        this.buffer = '';
    }

    async start(command, args = []) {
        return new Promise((resolve, reject) => {
            this.process = spawn(command, args, {
                stdio: ['pipe', 'pipe', 'pipe'],
                shell: false
            });

            this.process.stdout.on('data', (data) => {
                this.buffer += data.toString();
                this.processBuffer();
            });

            this.process.stderr.on('data', (data) => {
                const message = data.toString();
                if (message.includes('Git Memory MCP server running')) {
                    console.log('‚úÖ MCP Server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏à‡∏≤‡∏Å stderr)');
                    resolve();
                }
            });

            this.process.on('error', (error) => {
                console.error('‚ùå Process error:', error);
                reject(error);
            });

            setTimeout(() => {
                if (this.process && !this.process.killed) {
                    resolve();
                }
            }, 2000);
        });
    }

    processBuffer() {
        const lines = this.buffer.split('\n');
        this.buffer = lines.pop() || '';

        for (const line of lines) {
            if (line.trim()) {
                try {
                    const message = JSON.parse(line);
                    this.handleMessage(message);
                } catch (error) {
                    // Ignore non-JSON lines
                }
            }
        }
    }

    handleMessage(message) {
        if (message.id && this.pendingRequests.has(message.id)) {
            const { resolve, reject } = this.pendingRequests.get(message.id);
            this.pendingRequests.delete(message.id);

            if (message.error) {
                reject(new Error(message.error.message || 'Unknown error'));
            } else {
                resolve(message);
            }
        }
    }

    async sendRequest(method, params = {}) {
        return new Promise((resolve, reject) => {
            const id = ++this.requestId;
            const request = {
                jsonrpc: '2.0',
                id,
                method,
                params
            };

            this.pendingRequests.set(id, { resolve, reject });
            this.process.stdin.write(JSON.stringify(request) + '\n');

            setTimeout(() => {
                if (this.pendingRequests.has(id)) {
                    this.pendingRequests.delete(id);
                    reject(new Error('Request timeout'));
                }
            }, 10000);
        });
    }

    async close() {
        if (this.process) {
            this.process.kill();
            this.process = null;
        }
    }
}

// Test functions
async function testInitialize(client) {
    console.log('\nüîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Initialize...');
    console.log('üì§ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠: initialize');
    
    try {
        const response = await client.sendRequest('initialize', {
            protocolVersion: '2024-11-05',
            capabilities: {
                roots: {
                    listChanged: true
                },
                sampling: {}
            },
            clientInfo: {
                name: 'test-client',
                version: '1.0.0'
            }
        });
        
        if (response.result) {
            console.log('‚úÖ Initialize ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            console.log(`üìã Server Info: ${response.result.serverInfo?.name} v${response.result.serverInfo?.version}`);
            console.log(`üõ†Ô∏è  Capabilities: ${JSON.stringify(response.result.capabilities)}`);
            return true;
        } else {
            console.log('‚ùå Initialize ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', response);
            return false;
        }
    } catch (error) {
        console.log('‚ùå Initialize error:', error.message);
        return false;
    }
}

async function testListTools(client) {
    console.log('\nüõ†Ô∏è  ‡∏ó‡∏î‡∏™‡∏≠‡∏ö List Tools...');
    console.log('üì§ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠: tools/list');
    
    try {
        const response = await client.sendRequest('tools/list');
        
        if (response.result && response.result.tools) {
            console.log('‚úÖ List Tools ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Tools: ${response.result.tools.length}`);
            response.result.tools.forEach((tool, index) => {
                console.log(`   ${index + 1}. ${tool.name} - ${tool.description}`);
            });
            return response.result.tools;
        } else {
            console.log('‚ùå List Tools ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', response);
            return [];
        }
    } catch (error) {
        console.log('‚ùå List Tools error:', error.message);
        return [];
    }
}

async function testSmartCommit(client) {
    console.log('\nüß† ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Smart Commit Tool...');
    console.log('üì§ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠: tools/call');
    
    try {
        const response = await client.sendRequest('tools/call', {
            name: 'smart_commit',
            arguments: {
                message: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö smart commit feature',
                context: '‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Git Memory MCP Server'
            }
        });
        
        if (response.result) {
            console.log('‚úÖ Smart Commit ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            console.log('üìÑ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:', JSON.stringify(response.result, null, 2).substring(0, 300) + '...');
            return true;
        } else {
            console.log('‚ùå Smart Commit ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', response);
            return false;
        }
    } catch (error) {
        console.log('‚ùå Smart Commit error:', error.message);
        return false;
    }
}

async function testPatternAnalysis(client) {
    console.log('\nüìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Pattern Analysis Tool...');
    console.log('üì§ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠: tools/call');
    
    try {
        const response = await client.sendRequest('tools/call', {
            name: 'pattern_analysis',
            arguments: {
                analysis_type: 'commit_patterns',
                timeframe: '1 month'
            }
        });
        
        if (response.result) {
            console.log('‚úÖ Pattern Analysis ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            console.log('üìÑ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:', JSON.stringify(response.result, null, 2).substring(0, 300) + '...');
            return true;
        } else {
            console.log('‚ùå Pattern Analysis ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', response);
            return false;
        }
    } catch (error) {
        console.log('‚ùå Pattern Analysis error:', error.message);
        return false;
    }
}

async function testContextSearch(client) {
    console.log('\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Context Search Tool...');
    console.log('üì§ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠: tools/call');
    
    try {
        const response = await client.sendRequest('tools/call', {
            name: 'context_search',
            arguments: {
                query: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
                include_git: true,
                include_memory: true,
                limit: 5
            }
        });
        
        if (response.result) {
            console.log('‚úÖ Context Search ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            console.log('üìÑ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:', JSON.stringify(response.result, null, 2).substring(0, 300) + '...');
            return true;
        } else {
            console.log('‚ùå Context Search ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', response);
            return false;
        }
    } catch (error) {
        console.log('‚ùå Context Search error:', error.message);
        return false;
    }
}

// Main test function
async function runCompleteTests() {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Git Memory MCP Server ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
    console.log('============================================================');
    
    const client = new MCPClient();
    
    try {
        // Start MCP Server
        console.log('\nüîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MCP Server...');
        await client.start('node', ['dist/index.js']);
        
        // Test 1: Initialize
        const initSuccess = await testInitialize(client);
        if (!initSuccess) {
            throw new Error('Initialize ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
        }
        
        // Test 2: List Tools
        const tools = await testListTools(client);
        if (tools.length === 0) {
            throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö Tools');
        }
        
        // Test 3: Smart Commit (‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏î‡πà‡∏ô)
        if (tools.some(t => t.name === 'smart_commit')) {
            await testSmartCommit(client);
        } else {
            console.log('\n‚ö†Ô∏è  Smart Commit tool ‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏Ç‡πâ‡∏≤‡∏°');
        }
        
        // Test 4: Pattern Analysis (‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏î‡πà‡∏ô)
        if (tools.some(t => t.name === 'pattern_analysis')) {
            await testPatternAnalysis(client);
        } else {
            console.log('\n‚ö†Ô∏è  Pattern Analysis tool ‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏Ç‡πâ‡∏≤‡∏°');
        }
        
        // Test 5: Context Search (‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏î‡πà‡∏ô)
        if (tools.some(t => t.name === 'context_search')) {
            await testContextSearch(client);
        } else {
            console.log('\n‚ö†Ô∏è  Context Search tool ‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏Ç‡πâ‡∏≤‡∏°');
        }
        
        console.log('\n============================================================');
        console.log('üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
        console.log('‚úÖ Git Memory MCP Server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå');
        console.log(`üìä Tools ‡∏ó‡∏µ‡πà‡∏û‡∏ö: ${tools.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log('üöÄ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á!');
        
    } catch (error) {
        console.error('\n‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
        process.exit(1);
    } finally {
        await client.close();
    }
}

// Run tests
if (require.main === module) {
    runCompleteTests().catch(console.error);
}

module.exports = { runCompleteTests };