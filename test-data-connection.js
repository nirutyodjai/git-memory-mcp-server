// üöÄ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏±‡∏ö MCP System
// Test Data Connection with MCP Lightweight System

const http = require('http');
const fs = require('fs');

// üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
const testData = {
    users: [
        { id: 1, name: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢', email: 'somchai@test.com', role: 'admin' },
        { id: 2, name: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á', email: 'somying@test.com', role: 'user' },
        { id: 3, name: '‡∏ß‡∏¥‡∏ä‡∏±‡∏¢', email: 'wichai@test.com', role: 'moderator' }
    ],
    products: [
        { id: 1, name: '‡πÇ‡∏ô‡πä‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ', price: 25000, category: 'electronics' },
        { id: 2, name: '‡πÄ‡∏°‡∏≤‡∏™‡πå', price: 500, category: 'accessories' },
        { id: 3, name: '‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î', price: 1500, category: 'accessories' }
    ],
    orders: [
        { id: 1, userId: 1, productId: 1, quantity: 1, total: 25000 },
        { id: 2, userId: 2, productId: 2, quantity: 2, total: 1000 },
        { id: 3, userId: 3, productId: 3, quantity: 1, total: 1500 }
    ]
};

// üîß ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MCP
class MCPDataConnector {
    constructor(mcpUrl = 'http://localhost:9090') {
        this.mcpUrl = mcpUrl;
        this.isConnected = false;
    }

    // ‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    async testConnection() {
        try {
            console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MCP...');
            const response = await this.makeRequest('/health');
            
            if (response.status === 'healthy') {
                this.isConnected = true;
                console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MCP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
                console.log(`üìä ‡πÇ‡∏´‡∏°‡∏î: ${response.mode}`);
                console.log(`üíæ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥: ${response.memory}MB`);
                console.log(`üñ•Ô∏è ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ${response.servers} ‡∏ï‡∏±‡∏ß`);
                return true;
            }
        } catch (error) {
            console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MCP:', error.message);
            this.isConnected = false;
            return false;
        }
    }

    // üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Memory Server
    async storeData(key, data) {
        if (!this.isConnected) {
            throw new Error('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MCP');
        }

        try {
            console.log(`üíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${key}`);
            const response = await this.makeRequest('/mcp/memory', {
                method: 'POST',
                data: {
                    method: 'tools/call',
                    params: {
                        name: 'store_memory',
                        arguments: {
                            key: key,
                            value: JSON.stringify(data),
                            metadata: {
                                timestamp: new Date().toISOString(),
                                type: 'test_data',
                                source: 'data_connection_test'
                            }
                        }
                    }
                }
            });
            
            console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${key} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
            return response;
        } catch (error) {
            console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${key}:`, error.message);
            throw error;
        }
    }

    // üìñ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Memory Server
    async retrieveData(key) {
        if (!this.isConnected) {
            throw new Error('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MCP');
        }

        try {
            console.log(`üìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${key}`);
            const response = await this.makeRequest('/mcp/memory', {
                method: 'POST',
                data: {
                    method: 'tools/call',
                    params: {
                        name: 'read_memory',
                        arguments: {
                            key: key
                        }
                    }
                }
            });
            
            if (response.content && response.content[0] && response.content[0].text) {
                console.log(`‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${key} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
                return JSON.parse(response.content[0].text);
            } else {
                console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${key}`);
                return null;
            }
        } catch (error) {
            console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${key}:`, error.message);
            return null;
        }
    }

    // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    async searchData(query) {
        if (!this.isConnected) {
            throw new Error('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MCP');
        }

        try {
            console.log(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: ${query}`);
            const response = await this.makeRequest('/mcp/memory', {
                method: 'POST',
                data: {
                    method: 'tools/call',
                    params: {
                        name: 'search_memory',
                        arguments: {
                            query: query,
                            limit: 10
                        }
                    }
                }
            });
            
            const results = response.content || [];
            console.log(`‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏û‡∏ö ${results.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
            return results;
        } catch (error) {
            console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:`, error.message);
            return [];
        }
    }

    // üåê ‡∏™‡πà‡∏á HTTP Request
    async makeRequest(path, options = {}) {
        return new Promise((resolve, reject) => {
            const url = `${this.mcpUrl}${path}`;
            const method = options.method || 'GET';
            const data = options.data ? JSON.stringify(options.data) : null;
            
            const req = http.request(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    ...(data && { 'Content-Length': Buffer.byteLength(data) })
                }
            }, (res) => {
                let body = '';
                res.on('data', chunk => body += chunk);
                res.on('end', () => {
                    try {
                        const response = JSON.parse(body);
                        resolve(response);
                    } catch (error) {
                        reject(new Error(`Invalid JSON response: ${body}`));
                    }
                });
            });
            
            req.on('error', reject);
            
            if (data) {
                req.write(data);
            }
            
            req.end();
        });
    }

    // üìä ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    async getPerformanceStats() {
        try {
            const response = await this.makeRequest('/performance');
            console.log('\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û:');
            console.log(`üíæ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥: ${Math.round(response.memory.heapUsed / 1024 / 1024)}MB`);
            console.log(`‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ${Math.round(response.uptime)}s`);
            console.log(`üóÑÔ∏è ‡πÅ‡∏Ñ‡∏ä: ${response.cache.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
            return response;
        } catch (error) {
            console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:', error.message);
        }
    }
}

// üß™ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å
async function runDataConnectionTest() {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MCP\n');
    
    const connector = new MCPDataConnector();
    
    try {
        // 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        const connected = await connector.testConnection();
        if (!connected) {
            console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ MCP Server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà');
            return;
        }
        
        console.log('\nüìù ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
        
        // 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        await connector.storeData('test_users', testData.users);
        await connector.storeData('test_products', testData.products);
        await connector.storeData('test_orders', testData.orders);
        
        // 3. ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
        console.log('\nüìñ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
        const users = await connector.retrieveData('test_users');
        const products = await connector.retrieveData('test_products');
        const orders = await connector.retrieveData('test_orders');
        
        console.log(`üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${users?.length || 0} ‡∏Ñ‡∏ô`);
        console.log(`üì¶ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${products?.length || 0} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log(`üõí ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: ${orders?.length || 0} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
        // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        console.log('\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...');
        const searchResults = await connector.searchData('‡∏™‡∏°‡∏ä‡∏≤‡∏¢');
        console.log(`üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ '‡∏™‡∏°‡∏ä‡∏≤‡∏¢': ${searchResults.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
        // 5. ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        await connector.getPerformanceStats();
        
        // 6. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        const report = {
            timestamp: new Date().toISOString(),
            connection: 'success',
            dataStored: {
                users: users?.length || 0,
                products: products?.length || 0,
                orders: orders?.length || 0
            },
            searchTest: {
                query: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢',
                results: searchResults.length
            },
            status: 'completed'
        };
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        fs.writeFileSync('test-connection-report.json', JSON.stringify(report, null, 2));
        console.log('\n‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå! ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô test-connection-report.json');
        
    } catch (error) {
        console.error('\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error.message);
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        const errorReport = {
            timestamp: new Date().toISOString(),
            error: error.message,
            status: 'failed'
        };
        fs.writeFileSync('test-connection-error.json', JSON.stringify(errorReport, null, 2));
    }
}

// üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
if (require.main === module) {
    runDataConnectionTest();
}

// ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô
module.exports = { MCPDataConnector, testData, runDataConnectionTest };

// üìö ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
// const { MCPDataConnector } = require('./test-data-connection.js');
// const connector = new MCPDataConnector();
// await connector.testConnection();
// await connector.storeData('mykey', { message: 'Hello MCP!' });
// const data = await connector.retrieveData('mykey');
// console.log(data);