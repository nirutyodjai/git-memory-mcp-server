#!/usr/bin/env node

/**
 * Git Memory Client - ‡∏ï‡∏±‡∏ß‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Git Memory Coordinator
 * ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á MCP Servers ‡∏ú‡πà‡∏≤‡∏ô HTTP API
 */

const http = require('http');
const https = require('https');

class GitMemoryClient {
    constructor(coordinatorHost = 'localhost', coordinatorPort = 9000) {
        this.coordinatorHost = coordinatorHost;
        this.coordinatorPort = coordinatorPort;
        this.baseUrl = `http://${coordinatorHost}:${coordinatorPort}`;
    }
    
    /**
     * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
     * @param {string} key - ‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
     * @param {any} value - ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö
     * @param {boolean} persist - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Git ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (default: false)
     * @param {boolean} isPrivate - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (default: false)
     * @param {string} password - ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (‡∏ñ‡πâ‡∏≤ isPrivate = true)
     */
    async setMemory(key, value, persist = false, isPrivate = false, password = null) {
        const requestBody = { key, value, persist };
        
        if (isPrivate) {
            requestBody.private = true;
            requestBody.password = password;
        }
        
        const data = JSON.stringify(requestBody);
        
        return new Promise((resolve, reject) => {
            const req = http.request(`${this.baseUrl}/memory/set`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Content-Length': Buffer.byteLength(data)
                }
            }, (res) => {
                let body = '';
                res.on('data', chunk => body += chunk);
                res.on('end', () => {
                    try {
                        const result = JSON.parse(body);
                        if (res.statusCode === 200) {
                            resolve(result);
                        } else {
                            reject(new Error(result.error || `HTTP ${res.statusCode}`));
                        }
                    } catch (error) {
                        reject(error);
                    }
                });
            });
            
            req.on('error', reject);
            req.write(data);
            req.end();
        });
    }
    
    /**
     * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
     * @param {string} key - ‡∏Ñ‡∏µ‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
     * @param {string} password - ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß (optional)
     */
    async getMemory(key, password = null) {
        return new Promise((resolve, reject) => {
            let url = `${this.baseUrl}/memory/get?key=${encodeURIComponent(key)}`;
            if (password) {
                url += `&password=${encodeURIComponent(password)}`;
            }
            
            const req = http.get(url, (res) => {
                let body = '';
                res.on('data', chunk => body += chunk);
                res.on('end', () => {
                    try {
                        const result = JSON.parse(body);
                        if (res.statusCode === 200) {
                            resolve(result);
                        } else if (res.statusCode === 404) {
                            resolve(null); // Key not found
                        } else {
                            reject(new Error(result.error || `HTTP ${res.statusCode}`));
                        }
                    } catch (error) {
                        reject(error);
                    }
                });
            });
            
            req.on('error', reject);
        });
    }
    
    /**
     * ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Git
     */
    async syncMemory() {
        return new Promise((resolve, reject) => {
            const req = http.request(`${this.baseUrl}/memory/sync`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            }, (res) => {
                let body = '';
                res.on('data', chunk => body += chunk);
                res.on('end', () => {
                    try {
                        const result = JSON.parse(body);
                        if (res.statusCode === 200) {
                            resolve(result);
                        } else {
                            reject(new Error(result.error || `HTTP ${res.statusCode}`));
                        }
                    } catch (error) {
                        reject(error);
                    }
                });
            });
            
            req.on('error', reject);
            req.end();
        });
    }
    
    /**
     * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Coordinator
     */
    async getStatus() {
        return new Promise((resolve, reject) => {
            const req = http.get(`${this.baseUrl}/status`, (res) => {
                let body = '';
                res.on('data', chunk => body += chunk);
                res.on('end', () => {
                    try {
                        const result = JSON.parse(body);
                        if (res.statusCode === 200) {
                            resolve(result);
                        } else {
                            reject(new Error(result.error || `HTTP ${res.statusCode}`));
                        }
                    } catch (error) {
                        reject(error);
                    }
                });
            });
            
            req.on('error', reject);
        });
    }
    
    /**
     * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ servers
     */
    async getServers() {
        return new Promise((resolve, reject) => {
            const req = http.get(`${this.baseUrl}/servers`, (res) => {
                let body = '';
                res.on('data', chunk => body += chunk);
                res.on('end', () => {
                    try {
                        const result = JSON.parse(body);
                        if (res.statusCode === 200) {
                            resolve(result);
                        } else {
                            reject(new Error(result.error || `HTTP ${res.statusCode}`));
                        }
                    } catch (error) {
                        reject(error);
                    }
                });
            });
            
            req.on('error', reject);
        });
    }
    
    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
     */
    async ping() {
        try {
            const status = await this.getStatus();
            return status.coordinator.status === 'running';
        } catch (error) {
            return false;
        }
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô Command Line
async function main() {
    const args = process.argv.slice(2);
    const command = args[0];
    
    if (!command) {
        console.log('üîß Git Memory Client - ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:');
        console.log('  node git-memory-client.js status          - ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ coordinator');
        console.log('  node git-memory-client.js servers         - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ servers');
        console.log('  node git-memory-client.js set <key> <value> [persist] [private] [password] - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
        console.log('  node git-memory-client.js get <key> [password] - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
        console.log('  node git-memory-client.js sync            - ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Git');
        console.log('  node git-memory-client.js broadcast <key> <value> [password] - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö broadcast');
        console.log('  node git-memory-client.js notify <message> [server1] [server2] - ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô');
        console.log('  node git-memory-client.js subscribe <key> [webhook_url] - ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï');
        console.log('  node git-memory-client.js watch <key> [password] - ‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏ö‡∏ö real-time');
        console.log('  node git-memory-client.js ping            - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
        console.log('');
        console.log('‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:');
        console.log('  node git-memory-client.js set "user_config" "{\"theme\":\"dark\"}" true');
        console.log('  node git-memory-client.js set "secret" "mydata" true private mypassword');
        console.log('  node git-memory-client.js get "user_config"');
        console.log('  node git-memory-client.js get "secret" mypassword');
        console.log('');
        console.log('üì¢ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
        console.log('  node git-memory-client.js broadcast "team_update" "New feature deployed"');
        console.log('  node git-memory-client.js notify "System maintenance" gen-001 gen-002');
        console.log('  node git-memory-client.js subscribe "team_updates" "http://localhost:3000/webhook"');
        console.log('  node git-memory-client.js watch "shared_config" mypassword');
        console.log('');
        console.log('üîí ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß:');
        console.log('  - ‡πÉ‡∏ä‡πâ "private" ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
        console.log('  - Servers ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ä‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
        console.log('  - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Git');
        console.log('');
        console.log('üöÄ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà:');
        console.log('  - Broadcast: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á servers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
        console.log('  - Notification: ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á servers ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
        console.log('  - Subscription: ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡∏∞ webhook');
        console.log('  - Watch: ‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏ö‡∏ö real-time');
        return;
    }
    
    const client = new GitMemoryClient();
    
    try {
        switch (command) {
            case 'status':
                const status = await client.getStatus();
                console.log('üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Git Memory Coordinator:');
                console.log('=' .repeat(50));
                console.log(`üöÄ Coordinator: ${status.coordinator.status}`);
                console.log(`üîå Port: ${status.coordinator.port}`);
                console.log(`‚è±Ô∏è  Uptime: ${Math.floor(status.coordinator.uptime)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
                console.log(`üíæ Memory Usage: ${Math.round(status.coordinator.memory.rss / 1024 / 1024)} MB`);
                console.log('');
                console.log(`üì° Servers: ${status.servers.active}/${status.servers.total} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô`);
                console.log(`üóÑÔ∏è  Memory Store: ${status.memory.storeSize} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
                console.log(`üìÅ Git Path: ${status.memory.gitPath}`);
                break;
                
            case 'servers':
                const servers = await client.getServers();
                console.log('üì° ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ MCP Servers:');
                console.log('=' .repeat(50));
                console.log(`üìä ‡∏™‡∏£‡∏∏‡∏õ: ${servers.summary.active}/${servers.summary.total} servers ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô`);
                console.log('');
                
                const activeServers = servers.servers.filter(s => s.status === 'active');
                const inactiveServers = servers.servers.filter(s => s.status === 'inactive');
                
                if (activeServers.length > 0) {
                    console.log('‚úÖ Servers ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:');
                    activeServers.slice(0, 10).forEach(server => {
                        console.log(`  ${server.name} - Health: ${server.healthPort}, MCP: ${server.mcpPort}`);
                    });
                    if (activeServers.length > 10) {
                        console.log(`  ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${activeServers.length - 10} servers`);
                    }
                }
                
                if (inactiveServers.length > 0) {
                    console.log('');
                    console.log(`‚ùå Servers ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ${inactiveServers.length} servers`);
                }
                break;
                
            case 'set':
                const key = args[1];
                const value = args[2];
                const persist = args[3] === 'true';
                const isPrivate = args[4] === 'private';
                const password = args[5];
                
                if (!key || !value) {
                    console.error('‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ key ‡πÅ‡∏•‡∏∞ value');
                    process.exit(1);
                }
                
                if (isPrivate && !password) {
                    console.error('‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß');
                    process.exit(1);
                }
                
                let parsedValue;
                try {
                    parsedValue = JSON.parse(value);
                } catch {
                    parsedValue = value; // ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡∏ñ‡πâ‡∏≤ parse ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
                }
                
                const setResult = await client.setMemory(key, parsedValue, persist, isPrivate, password);
                console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${key}`);
                console.log(`üìù Persistent: ${setResult.persisted ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'}`);
                console.log(`üîí Private: ${isPrivate ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'}`);
                if (isPrivate) {
                    console.log(`üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: Servers ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ä‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ`);
                }
                break;
                
            case 'get':
                const getKey = args[1];
                const getPassword = args[2];
                
                if (!getKey) {
                    console.error('‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ key');
                    process.exit(1);
                }
                
                const getResult = await client.getMemory(getKey, getPassword);
                if (getResult) {
                    console.log(`üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${getKey}`);
                    console.log('=' .repeat(30));
                    console.log('Value:', JSON.stringify(getResult.value, null, 2));
                    console.log(`Timestamp: ${getResult.timestamp}`);
                    console.log(`Persistent: ${getResult.persist ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'}`);
                    console.log(`Private: ${getResult.private ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'}`);
                    if (getResult.private) {
                        console.log(`üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß`);
                    }
                } else {
                    console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${getKey}`);
                }
                break;
                
            case 'sync':
                const syncResult = await client.syncMemory();
                console.log(`üîÑ ${syncResult.message}`);
                console.log(`üìä Memory Store: ${syncResult.storeSize} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
                break;
                
            case 'broadcast':
                const broadcastKey = args[1];
                const broadcastValue = args[2];
                const broadcastPassword = args[3];
                
                if (!broadcastKey || !broadcastValue) {
                    console.log('‚ùå Usage: broadcast <key> <value> [password]');
                    console.log('   Example: broadcast "team_update" "New feature deployed" team2024');
                    process.exit(1);
                }
                
                await broadcastUpdate(client, broadcastKey, broadcastValue, broadcastPassword);
                break;
                
            case 'notify':
                const notifyMessage = args[1];
                const notifyServers = args.slice(2);
                
                if (!notifyMessage) {
                    console.log('‚ùå Usage: notify <message> [server1] [server2] ...');
                    console.log('   Example: notify "System maintenance in 5 minutes" gen-001 gen-002');
                    process.exit(1);
                }
                
                await sendNotification(client, notifyMessage, notifyServers);
                break;
                
            case 'subscribe':
                const subscribeKey = args[1];
                const webhookUrl = args[2];
                
                if (!subscribeKey) {
                    console.log('‚ùå Usage: subscribe <key> [webhook_url]');
                    console.log('   Example: subscribe "team_updates" "http://localhost:3000/webhook"');
                    process.exit(1);
                }
                
                await subscribeToUpdates(client, subscribeKey, webhookUrl);
                break;
                
            case 'watch':
                const watchKey = args[1];
                const watchPassword = args[2];
                
                if (!watchKey) {
                    console.log('‚ùå Usage: watch <key> [password]');
                    console.log('   Example: watch "shared_config" mypassword');
                    process.exit(1);
                }
                
                await watchForChanges(client, watchKey, watchPassword);
                break;
                
            case 'ping':
                const isOnline = await client.ping();
                console.log(`üîå Coordinator: ${isOnline ? '‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ' : '‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ'}`);
                break;
                
            case 'help':
            case '--help':
            case '-h':
                showHelp();
                break;
                
            default:
                console.error(`‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å: ${command}`);
                showHelp();
                process.exit(1);
        }
    } catch (error) {
        console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
        process.exit(1);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö broadcast ‡πÑ‡∏õ‡∏¢‡∏±‡∏á servers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function broadcastUpdate(client, key, value, password = null) {
    try {
        const broadcastData = {
            type: 'broadcast',
            originalKey: key,
            message: value,
            timestamp: new Date().toISOString(),
            sender: process.env.SERVER_ID || 'unknown'
        };
        
        const result = await client.setMemory(
            `broadcast_${Date.now()}`,
            broadcastData,
            true, // persist
            !!password, // isPrivate
            password
        );
        
        console.log(`üì¢ ‡∏™‡πà‡∏á Broadcast ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${key}`);
        console.log(`üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${value}`);
        console.log(`üîí Private: ${password ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'}`);
        console.log(`‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH')}`);
    } catch (error) {
        console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á Broadcast: ${error.message}`);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á servers ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
async function sendNotification(client, message, targetServers = []) {
    try {
        const notificationData = {
            type: 'notification',
            message,
            targets: targetServers.length > 0 ? targetServers : ['all'],
            timestamp: new Date().toISOString(),
            sender: process.env.SERVER_ID || 'unknown',
            priority: 'normal'
        };
        
        const result = await client.setMemory(
            `notification_${Date.now()}`,
            notificationData,
            true // persist
        );
        
        console.log(`üîî ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        console.log(`üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${message}`);
        console.log(`üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ${targetServers.length > 0 ? targetServers.join(', ') : '‡∏ó‡∏∏‡∏Å servers'}`);
        console.log(`‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH')}`);
    } catch (error) {
        console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${error.message}`);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
async function subscribeToUpdates(client, key, webhookUrl = null) {
    try {
        const subscriptionData = {
            type: 'subscription',
            subscribedKey: key,
            subscriber: process.env.SERVER_ID || 'unknown',
            webhookUrl,
            timestamp: new Date().toISOString(),
            active: true
        };
        
        const result = await client.setMemory(
            `subscription_${process.env.SERVER_ID || 'unknown'}_${key}`,
            subscriptionData,
            true // persist
        );
        
        console.log(`üì¨ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        console.log(`üîë Key: ${key}`);
        console.log(`üåê Webhook: ${webhookUrl || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
        console.log(`‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH')}`);
    } catch (error) {
        console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ${error.message}`);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏ö‡∏ö real-time
async function watchForChanges(client, key, password = null) {
    console.log(`üëÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: ${key}`);
    console.log(`üîÑ ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î`);
    
    let lastValue = null;
    let lastTimestamp = null;
    
    const checkForChanges = async () => {
        try {
            const result = await client.getMemory(key, password);
            
            if (result && lastTimestamp !== result.timestamp) {
                if (lastValue !== null) {
                    console.log(`\nüîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á!`);
                    console.log(`‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date(result.timestamp).toLocaleString('th-TH')}`);
                    console.log(`üìù ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà: ${JSON.stringify(result.value, null, 2)}`);
                }
                
                lastValue = result.value;
                lastTimestamp = result.timestamp;
            }
        } catch (error) {
            console.log(`‚ö†Ô∏è Error checking for changes: ${error.message}`);
        }
    };
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    const interval = setInterval(checkForChanges, 2000);
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    await checkForChanges();
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Ctrl+C
    process.on('SIGINT', () => {
        clearInterval(interval);
        console.log(`\nüëã ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: ${key}`);
        process.exit(0);
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
function showHelp() {
    console.log(`
üöÄ Git Memory MCP Server - CLI Help
`);
    console.log(`üìñ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:`);
    console.log(`  git-memory set <key> <value> [persistent] [private] [password]`);
    console.log(`  git-memory get <key> [password]`);
    console.log(`  git-memory list`);
    console.log(`  git-memory status`);
    console.log(`  git-memory sync\n`);
    
    console.log(`üì° ‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á:`);
    console.log(`  git-memory broadcast <key> <value> [priority]`);
    console.log(`  git-memory notify <serverId> <message> [priority]`);
    console.log(`  git-memory subscribe <webhookUrl>`);
    console.log(`  git-memory watch <pattern>\n`);
    
    console.log(`üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:`);
    console.log(`  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏≤‡∏ß‡∏£`);
    console.log(`  git-memory set "user_config" '{"theme":"dark"}' true\n`);
    
    console.log(`  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™`);
    console.log(`  git-memory set "api_key" "secret123" true private "mypassword"\n`);
    
    console.log(`  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß`);
    console.log(`  git-memory get "api_key" "mypassword"\n`);
    
    console.log(`  # ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö broadcast`);
    console.log(`  git-memory broadcast "system_update" "v2.0.0" "high"\n`);
    
    console.log(`  # ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô webhook`);
    console.log(`  git-memory subscribe "http://localhost:3000/webhook"\n`);
    
    console.log(`üîß ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:`);
    console.log(`  --help, -h     ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ô‡∏µ‡πâ`);
    console.log(`  --version, -v  ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô\n`);
    
    console.log(`üåê Git Memory Coordinator ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà http://localhost:9000`);
    console.log(`üìö ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: https://github.com/git-memory/git-memory-mcp-server\n`);
}

// ‡∏£‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
    main();
}

module.exports = GitMemoryClient;