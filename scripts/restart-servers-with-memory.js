#!/usr/bin/env node

/**
 * Restart 1000 MCP Servers with Enhanced Memory Configuration
 * р╕гр╕╡р╕кр╕Хр╕▓р╕гр╣Мр╕Ч 1000 servers р╕Фр╣Йр╕зр╕вр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕лр╕Щр╣Ир╕зр╕вр╕Др╕зр╕▓р╕бр╕Ир╕│р╕Чр╕╡р╣Ир╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╣Бр╕ер╣Йр╕з
 */

const { spawn, exec } = require('child_process');
const path = require('path');

class ServerRestarter {
    constructor() {
        this.restartedServers = 0;
        this.totalServers = 1000;
    }

    async init() {
        console.log('ЁЯФД р╣Ар╕гр╕┤р╣Ир╕бр╕гр╕╡р╕кр╕Хр╕▓р╕гр╣Мр╕Ч 1000 MCP Servers р╕Фр╣Йр╕зр╕вр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕лр╕Щр╣Ир╕зр╕вр╕Др╕зр╕▓р╕бр╕Ир╕│р╣Гр╕лр╕бр╣И');
        console.log('=' .repeat(70));
        
        await this.stopExistingServers();
        await this.delay(5000); // р╕гр╕н 5 р╕зр╕┤р╕Щр╕▓р╕Чр╕╡р╣Гр╕лр╣Й servers р╕Ыр╕┤р╕Фр╕кр╕бр╕Ър╕╣р╕гр╕Ур╣М
        await this.startNewServers();
    }

    async stopExistingServers() {
        console.log('ЁЯЫС р╕Бр╕│р╕ер╕▒р╕Зр╕лр╕вр╕╕р╕Ф Node.js processes р╕Чр╕╡р╣Ир╕бр╕╡р╕нр╕вр╕╣р╣И...');
        
        return new Promise((resolve) => {
            // р╕лр╕вр╕╕р╕Ф Node.js processes р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕вр╕Бр╣Ар╕зр╣Йр╕Щ process р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ
            exec('taskkill /F /IM node.exe /T', (error, stdout, stderr) => {
                if (error && !error.message.includes('not found')) {
                    console.error('Error stopping processes:', error.message);
                } else {
                    console.log('тЬЕ р╕лр╕вр╕╕р╕Ф existing servers р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в');
                }
                resolve();
            });
        });
    }

    async startNewServers() {
        console.log('ЁЯЪА р╣Ар╕гр╕┤р╣Ир╕бр╕кр╕гр╣Йр╕▓р╕З servers р╣Гр╕лр╕бр╣Ир╕Фр╣Йр╕зр╕вр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕лр╕Щр╣Ир╕зр╕вр╕Др╕зр╕▓р╕бр╕Ир╕│р╕Чр╕╡р╣Ир╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З...');
        
        // р╕гр╕▒р╕Щр╕кр╕Др╕гр╕┤р╕Ыр╕Хр╣Мр╕кр╕гр╣Йр╕▓р╕З servers р╣Гр╕лр╕бр╣И
        const createScript = path.join(__dirname, 'create-1000-servers-no-debug.js');
        
        const serverProcess = spawn('node', [createScript], {
            stdio: 'inherit',
            env: {
                ...process.env,
                NODE_OPTIONS: '--max-old-space-size=1024'
            }
        });

        serverProcess.on('close', (code) => {
            if (code === 0) {
                console.log('\nЁЯОЙ р╕гр╕╡р╕кр╕Хр╕▓р╕гр╣Мр╕Ч servers р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ!');
                this.showMemoryStatus();
            } else {
                console.error(`тЭМ Server creation failed with code ${code}`);
            }
        });

        serverProcess.on('error', (error) => {
            console.error('тЭМ Error starting servers:', error.message);
        });
    }

    async showMemoryStatus() {
        console.log('\nЁЯУК р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕Цр╕▓р╕Щр╕░р╕лр╕Щр╣Ир╕зр╕вр╕Др╕зр╕▓р╕бр╕Ир╕│р╣Гр╕лр╕бр╣И...');
        
        // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕лр╕Щр╣Ир╕зр╕вр╕Др╕зр╕▓р╕бр╕Ир╕│
        exec('powershell "Get-Process -Name node | Measure-Object -Property WorkingSet -Sum | Select-Object @{Name=\'TotalMemoryMB\';Expression={[math]::Round($_.Sum/1MB,2)}}"', 
            (error, stdout, stderr) => {
                if (!error) {
                    console.log('ЁЯТ╛ р╕кр╕Цр╕▓р╕Щр╕░р╕лр╕Щр╣Ир╕зр╕вр╕Др╕зр╕▓р╕бр╕Ир╕│:');
                    console.log(stdout);
                }
            }
        );

        // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ир╕│р╕Щр╕зр╕Щ processes
        exec('powershell "(Get-Process -Name node).Count"', (error, stdout, stderr) => {
            if (!error) {
                console.log(`ЁЯПГтАНтЩВя╕П р╕Ир╕│р╕Щр╕зр╕Щ Node.js processes: ${stdout.trim()}`);
            }
        });
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// р╣Ар╕гр╕┤р╣Ир╕бр╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щ
const restarter = new ServerRestarter();
restarter.init().catch(console.error);

// р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Бр╕▓р╕гр╕Ыр╕┤р╕Фр╣Вр╕Ыр╕гр╣Бр╕Бр╕гр╕б
process.on('SIGINT', () => {
    console.log('\nЁЯЫС р╕Бр╕│р╕ер╕▒р╕Зр╕Ыр╕┤р╕Фр╣Вр╕Ыр╕гр╣Бр╕Бр╕гр╕б...');
    process.exit(0);
});