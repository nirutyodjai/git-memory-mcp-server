# =============================================================================
# Docker Compose Configuration for Git Memory MCP Server Production
# =============================================================================
# Description: Production deployment with full monitoring stack
# Author: NEXUS AI Development Team
# Version: 1.0.0
# =============================================================================

version: '3.8'

networks:
  git-memory-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  nginx_logs:
    driver: local
  app_logs:
    driver: local
  ssl_certs:
    driver: local

services:
  # =============================================================================
  # Core Application Services
  # =============================================================================
  
  git-memory-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: git-memory-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://git_memory_user:${POSTGRES_PASSWORD}@postgres:5432/git_memory_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - DOMAIN=gitmemory.comdee.co.th
      - SSL_ENABLED=true
      - LOG_LEVEL=info
      - METRICS_ENABLED=true
      - HEALTH_CHECK_ENABLED=true
    volumes:
      - app_logs:/app/logs
      - ./config:/app/config:ro
    networks:
      - git-memory-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: json-file
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=git-memory-app,environment=production"

  # =============================================================================
  # Database Services
  # =============================================================================
  
  postgres:
    image: postgres:16-alpine
    container_name: git-memory-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=git_memory_db
      - POSTGRES_USER=git_memory_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./config/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    networks:
      - git-memory-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U git_memory_user -d git_memory_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=postgres,environment=production"

  redis:
    image: redis:7-alpine
    container_name: git-memory-redis
    restart: unless-stopped
    command: redis-server /etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - git-memory-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=redis,environment=production"

  # =============================================================================
  # Web Server
  # =============================================================================
  
  nginx:
    image: nginx:1.25-alpine
    container_name: git-memory-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/sites-available:/etc/nginx/sites-available:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - ssl_certs:/etc/letsencrypt:ro
    networks:
      - git-memory-network
    depends_on:
      - git-memory-app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    logging:
      driver: json-file
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=nginx,environment=production"

  # =============================================================================
  # Monitoring Stack
  # =============================================================================
  
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: git-memory-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    networks:
      - git-memory-network
    depends_on:
      - git-memory-app
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=prometheus,environment=production"

  grafana:
    image: grafana/grafana:10.2.0
    container_name: git-memory-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource,grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - git-memory-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=grafana,environment=production"

  loki:
    image: grafana/loki:2.9.0
    container_name: git-memory-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./config/loki/loki.yml:/etc/loki/local-config.yaml:ro
    networks:
      - git-memory-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=loki,environment=production"

  promtail:
    image: grafana/promtail:2.9.0
    container_name: git-memory-promtail
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./config/promtail.yml:/etc/promtail/config.yml:ro
      - app_logs:/app/logs:ro
      - nginx_logs:/var/log/nginx:ro
      - /var/log:/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - git-memory-network
    depends_on:
      - loki
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 64M
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=promtail,environment=production"

  # =============================================================================
  # System Monitoring
  # =============================================================================
  
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: git-memory-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - git-memory-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 32M
    logging:
      driver: json-file
      options:
        max-size: "25m"
        max-file: "2"
        labels: "service=node-exporter,environment=production"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: git-memory-cadvisor
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    networks:
      - git-memory-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 64M
    logging:
      driver: json-file
      options:
        max-size: "25m"
        max-file: "2"
        labels: "service=cadvisor,environment=production"

  # =============================================================================
  # Alerting
  # =============================================================================
  
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: git-memory-alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--log.level=info'
    ports:
      - "9093:9093"
    volumes:
      - ./config/alertmanager:/etc/alertmanager:ro
    networks:
      - git-memory-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 64M
    logging:
      driver: json-file
      options:
        max-size: "25m"
        max-file: "2"
        labels: "service=alertmanager,environment=production"

  # =============================================================================
  # Backup Services
  # =============================================================================
  
  backup:
    image: postgres:16-alpine
    container_name: git-memory-backup
    restart: "no"
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - git-memory-network
    depends_on:
      - postgres
    command: ["/bin/sh", "-c", "while true; do sleep 86400; /backup.sh; done"]
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 64M
    logging:
      driver: json-file
      options:
        max-size: "25m"
        max-file: "2"
        labels: "service=backup,environment=production"

  # =============================================================================
  # SSL Certificate Management
  # =============================================================================
  
  certbot:
    image: certbot/certbot:latest
    container_name: git-memory-certbot
    restart: "no"
    volumes:
      - ssl_certs:/etc/letsencrypt
      - ./config/certbot:/etc/certbot:ro
    networks:
      - git-memory-network
    command: ["/bin/sh", "-c", "while true; do sleep 86400; certbot renew --quiet; done"]
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
        reservations:
          cpus: '0.02'
          memory: 32M
    logging:
      driver: json-file
      options:
        max-size: "25m"
        max-file: "2"
        labels: "service=certbot,environment=production"