/**
 * NEXUS IDE - Master Control System
 * ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á MCP Servers ‡∏ó‡∏±‡πâ‡∏á 3000 ‡∏ï‡∏±‡∏ß
 * ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
 */

const NexusDataIntegration = require('./nexus-data-integration');
const { UniversalDataClient } = require('./universal-data-client');
const WebSocket = require('ws');
const http = require('http');
const { performance } = require('perf_hooks');
const { spawn } = require('child_process');
const fs = require('fs').promises;
const path = require('path');

class NexusMasterControl {
    constructor() {
        this.port = 9003;
        this.server = null;
        this.wsServer = null;
        this.connections = new Map();
        
        // ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        this.subsystems = {
            dataIntegration: null,
            universalHub: null,
            gitMemory: null,
            mcpRegistry: null
        };
        
        // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö
        this.systemStats = {
            totalServers: 3000,
            activeServers: 0,
            dataNodes: 0,
            totalConnections: 0,
            dataTransfers: 0,
            systemUptime: Date.now(),
            lastHealthCheck: null,
            errors: 0,
            performance: {
                cpu: 0,
                memory: 0,
                network: 0
            }
        };
        
        // ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
        this.config = {
            autoStart: true,
            healthCheckInterval: 30000, // 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            dataBackupInterval: 300000, // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
            maxRetries: 3,
            timeoutMs: 10000
        };
        
        // ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        this.processes = new Map();
        
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ backup
        this.backupData = new Map();
        
        this.healthCheckInterval = null;
        this.backupInterval = null;
    }

    async initialize() {
        console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô NEXUS Master Control System...');
        console.log('=' .repeat(60));
        
        try {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á HTTP ‡πÅ‡∏•‡∏∞ WebSocket Server
            await this.createServers();
            
            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            await this.initializeSubsystems();
            
            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö
            this.startHealthMonitoring();
            
            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£ backup ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            this.startDataBackup();
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
            await this.displaySystemStatus();
            
            console.log('=' .repeat(60));
            console.log('üéØ NEXUS Master Control ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!');
            console.log(`üì° Control Panel: http://localhost:${this.port}`);
            console.log(`üîå WebSocket API: ws://localhost:${this.port}`);
            console.log('=' .repeat(60));
            
        } catch (error) {
            console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:', error);
            throw error;
        }
    }

    async createServers() {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á HTTP Server
        this.server = http.createServer((req, res) => {
            this.handleHTTPRequest(req, res);
        });
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á WebSocket Server
        this.wsServer = new WebSocket.Server({ server: this.server });
        
        this.wsServer.on('connection', (ws, req) => {
            const connectionId = `master-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
            this.connections.set(connectionId, {
                ws,
                connectedAt: new Date(),
                lastActivity: new Date()
            });
            
            this.systemStats.totalConnections++;
            
            console.log(`üîó Master Control ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà: ${connectionId}`);
            
            ws.send(JSON.stringify({
                type: 'master_welcome',
                data: {
                    connectionId,
                    message: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ NEXUS Master Control ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                    systemStats: this.systemStats,
                    subsystems: Object.keys(this.subsystems)
                }
            }));
            
            ws.on('message', (message) => {
                this.handleWebSocketMessage(connectionId, message);
            });
            
            ws.on('close', () => {
                this.connections.delete(connectionId);
                console.log(`üîå Master Control ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏¥‡∏î: ${connectionId}`);
            });
        });
        
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Server
        await new Promise((resolve) => {
            this.server.listen(this.port, () => {
                console.log(`üåê Master Control Server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà port ${this.port}`);
                resolve();
            });
        });
    }

    async initializeSubsystems() {
        console.log('üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...');
        
        try {
            // 1. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Data Integration
            console.log('üìä ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Data Integration Layer...');
            this.subsystems.dataIntegration = new NexusDataIntegration();
            await this.subsystems.dataIntegration.initialize();
            
            // 2. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Universal Data Hub
            console.log('üåê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Universal Data Hub...');
            await this.startUniversalHub();
            
            // 3. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Git Memory Coordinator
            console.log('üìù ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Git Memory Coordinator...');
            await this.startGitMemoryCoordinator();
            
            // 4. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MCP Registry
            console.log('üóÇÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MCP Registry...');
            await this.startMCPRegistry();
            
            console.log('‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            
        } catch (error) {
            console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏¢:', error);
            throw error;
        }
    }

    async startUniversalHub() {
        return new Promise((resolve, reject) => {
            const hubProcess = spawn('node', ['universal-data-hub.js'], {
                cwd: __dirname,
                stdio: ['pipe', 'pipe', 'pipe']
            });
            
            this.processes.set('universal-hub', hubProcess);
            
            hubProcess.stdout.on('data', (data) => {
                const output = data.toString();
                if (output.includes('Universal Data Hub ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô')) {
                    console.log('‚úÖ Universal Data Hub ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
                    resolve();
                }
            });
            
            hubProcess.stderr.on('data', (data) => {
                console.error('Universal Hub Error:', data.toString());
            });
            
            hubProcess.on('exit', (code) => {
                if (code !== 0) {
                    console.error(`Universal Hub ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™ ${code}`);
                }
                this.processes.delete('universal-hub');
            });
            
            // Timeout ‡∏´‡∏•‡∏±‡∏á 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            setTimeout(() => {
                if (this.processes.has('universal-hub')) {
                    resolve(); // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
                }
            }, 10000);
        });
    }

    async startGitMemoryCoordinator() {
        return new Promise((resolve, reject) => {
            const memoryProcess = spawn('node', ['git-memory-coordinator.js'], {
                cwd: __dirname,
                stdio: ['pipe', 'pipe', 'pipe']
            });
            
            this.processes.set('git-memory', memoryProcess);
            
            memoryProcess.stdout.on('data', (data) => {
                const output = data.toString();
                if (output.includes('Git Memory Coordinator ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô')) {
                    console.log('‚úÖ Git Memory Coordinator ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
                    resolve();
                }
            });
            
            memoryProcess.stderr.on('data', (data) => {
                console.error('Git Memory Error:', data.toString());
            });
            
            memoryProcess.on('exit', (code) => {
                if (code !== 0) {
                    console.error(`Git Memory Coordinator ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™ ${code}`);
                }
                this.processes.delete('git-memory');
            });
            
            // Timeout ‡∏´‡∏•‡∏±‡∏á 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            setTimeout(() => {
                if (this.processes.has('git-memory')) {
                    resolve();
                }
            }, 10000);
        });
    }

    async startMCPRegistry() {
        // MCP Registry ‡∏≠‡∏≤‡∏à‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å NEXUS IDE
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        try {
            const response = await fetch('http://localhost:8080/api/servers/status');
            if (response.ok) {
                console.log('‚úÖ MCP Registry ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
                return;
            }
        } catch (error) {
            // MCP Registry ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà
        }
        
        return new Promise((resolve) => {
            console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MCP Registry ‡πÉ‡∏´‡∏°‡πà...');
            // ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MCP Registry ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
            setTimeout(resolve, 2000);
        });
    }

    async handleHTTPRequest(req, res) {
        // Enable CORS
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
        
        if (req.method === 'OPTIONS') {
            res.writeHead(200);
            res.end();
            return;
        }
        
        const url = new URL(req.url, `http://localhost:${this.port}`);
        const path = url.pathname;
        
        try {
            let response = {};
            
            switch (path) {
                case '/':
                    response = await this.getControlPanel();
                    res.setHeader('Content-Type', 'text/html');
                    break;
                    
                case '/api/status':
                    response = await this.getSystemStatus();
                    break;
                    
                case '/api/stats':
                    response = await this.getDetailedStats();
                    break;
                    
                case '/api/health':
                    response = await this.performHealthCheck();
                    break;
                    
                case '/api/restart':
                    if (req.method === 'POST') {
                        const body = await this.getRequestBody(req);
                        response = await this.restartSubsystem(body.subsystem);
                    }
                    break;
                    
                case '/api/backup':
                    response = await this.createDataBackup();
                    break;
                    
                case '/api/unified-data':
                    response = await this.getUnifiedDataOverview();
                    break;
                    
                default:
                    res.writeHead(404, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö endpoint' }));
                    return;
            }
            
            if (typeof response === 'string') {
                res.writeHead(200);
                res.end(response);
            } else {
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify(response));
            }
            
        } catch (error) {
            console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î HTTP:', error);
            this.systemStats.errors++;
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: error.message }));
        }
    }

    async handleWebSocketMessage(connectionId, message) {
        try {
            const data = JSON.parse(message);
            const { type, payload } = data;
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï last activity
            const connection = this.connections.get(connectionId);
            if (connection) {
                connection.lastActivity = new Date();
            }
            
            let response = {};
            
            switch (type) {
                case 'get_system_status':
                    response = await this.getSystemStatus();
                    break;
                    
                case 'perform_health_check':
                    response = await this.performHealthCheck();
                    break;
                    
                case 'restart_subsystem':
                    response = await this.restartSubsystem(payload.subsystem);
                    break;
                    
                case 'get_unified_data':
                    response = await this.getUnifiedDataOverview();
                    break;
                    
                case 'create_backup':
                    response = await this.createDataBackup();
                    break;
                    
                case 'get_performance_metrics':
                    response = await this.getPerformanceMetrics();
                    break;
            }
            
            this.sendToConnection(connectionId, {
                type: `${type}_response`,
                data: response
            });
            
        } catch (error) {
            console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î WebSocket:', error);
            this.systemStats.errors++;
            this.sendToConnection(connectionId, {
                type: 'error',
                data: { message: error.message }
            });
        }
    }

    async getSystemStatus() {
        const uptime = Date.now() - this.systemStats.systemUptime;
        
        return {
            success: true,
            system: {
                status: 'running',
                uptime: uptime,
                uptimeFormatted: this.formatUptime(uptime)
            },
            subsystems: {
                dataIntegration: this.subsystems.dataIntegration ? 'running' : 'stopped',
                universalHub: this.processes.has('universal-hub') ? 'running' : 'stopped',
                gitMemory: this.processes.has('git-memory') ? 'running' : 'stopped',
                mcpRegistry: 'running' // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
            },
            stats: this.systemStats,
            processes: Array.from(this.processes.keys()),
            connections: this.connections.size
        };
    }

    async getDetailedStats() {
        const memUsage = process.memoryUsage();
        
        return {
            success: true,
            system: {
                memory: {
                    used: Math.round(memUsage.heapUsed / 1024 / 1024),
                    total: Math.round(memUsage.heapTotal / 1024 / 1024),
                    external: Math.round(memUsage.external / 1024 / 1024)
                },
                cpu: {
                    usage: process.cpuUsage(),
                    loadAverage: require('os').loadavg()
                },
                network: {
                    connections: this.connections.size,
                    dataTransfers: this.systemStats.dataTransfers
                }
            },
            subsystems: await this.getSubsystemStats()
        };
    }

    async getSubsystemStats() {
        const stats = {};
        
        // Data Integration Stats
        if (this.subsystems.dataIntegration) {
            try {
                const response = await fetch('http://localhost:9002/api/stats');
                if (response.ok) {
                    stats.dataIntegration = await response.json();
                }
            } catch (error) {
                stats.dataIntegration = { error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ' };
            }
        }
        
        // Universal Hub Stats
        try {
            const response = await fetch('http://localhost:9001/api/stats');
            if (response.ok) {
                stats.universalHub = await response.json();
            }
        } catch (error) {
            stats.universalHub = { error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ' };
        }
        
        return stats;
    }

    async performHealthCheck() {
        console.log('üè• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö...');
        
        const healthStatus = {
            timestamp: new Date(),
            overall: 'healthy',
            subsystems: {},
            issues: []
        };
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Data Integration
        try {
            const response = await fetch('http://localhost:9002/api/stats', { timeout: 5000 });
            healthStatus.subsystems.dataIntegration = response.ok ? 'healthy' : 'unhealthy';
        } catch (error) {
            healthStatus.subsystems.dataIntegration = 'unhealthy';
            healthStatus.issues.push('Data Integration ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ôong');
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Universal Hub
        try {
            const response = await fetch('http://localhost:9001/api/stats', { timeout: 5000 });
            healthStatus.subsystems.universalHub = response.ok ? 'healthy' : 'unhealthy';
        } catch (error) {
            healthStatus.subsystems.universalHub = 'unhealthy';
            healthStatus.issues.push('Universal Hub ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á');
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Memory Usage
        const memUsage = process.memoryUsage();
        const memUsagePercent = (memUsage.heapUsed / memUsage.heapTotal) * 100;
        if (memUsagePercent > 80) {
            healthStatus.issues.push(`‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Memory ‡∏™‡∏π‡∏á: ${memUsagePercent.toFixed(1)}%`);
        }
        
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
        if (healthStatus.issues.length > 0) {
            healthStatus.overall = healthStatus.issues.length > 2 ? 'critical' : 'warning';
        }
        
        this.systemStats.lastHealthCheck = healthStatus.timestamp;
        
        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        this.broadcastToAll({
            type: 'health_check_completed',
            data: healthStatus
        });
        
        console.log(`üè• ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${healthStatus.overall}`);
        
        return {
            success: true,
            health: healthStatus
        };
    }

    async getUnifiedDataOverview() {
        try {
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Data Integration
            const integrationResponse = await fetch('http://localhost:9002/api/stats');
            const integrationData = integrationResponse.ok ? await integrationResponse.json() : null;
            
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Universal Hub
            const hubResponse = await fetch('http://localhost:9001/api/stats');
            const hubData = hubResponse.ok ? await hubResponse.json() : null;
            
            return {
                success: true,
                overview: {
                    totalServers: this.systemStats.totalServers,
                    activeConnections: this.connections.size,
                    dataIntegration: integrationData,
                    universalHub: hubData,
                    lastSync: this.systemStats.lastHealthCheck
                }
            };
            
        } catch (error) {
            return {
                success: false,
                error: error.message
            };
        }
    }

    async createDataBackup() {
        const backupId = `backup-${Date.now()}`;
        const backupPath = path.join(__dirname, 'backups', `${backupId}.json`);
        
        try {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå backup ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
            await fs.mkdir(path.dirname(backupPath), { recursive: true });
            
            // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backup
            const backupData = {
                timestamp: new Date(),
                backupId,
                systemStats: this.systemStats,
                subsystemsStatus: await this.getSystemStatus(),
                connections: this.connections.size,
                processes: Array.from(this.processes.keys())
            };
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå backup
            await fs.writeFile(backupPath, JSON.stringify(backupData, null, 2));
            
            console.log(`üíæ ‡∏™‡∏£‡πâ‡∏≤‡∏á backup ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${backupId}`);
            
            return {
                success: true,
                backupId,
                path: backupPath,
                size: JSON.stringify(backupData).length
            };
            
        } catch (error) {
            console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á backup:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    async restartSubsystem(subsystemName) {
        console.log(`üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô restart ${subsystemName}...`);
        
        try {
            switch (subsystemName) {
                case 'universal-hub':
                    if (this.processes.has('universal-hub')) {
                        this.processes.get('universal-hub').kill();
                        await new Promise(resolve => setTimeout(resolve, 2000));
                    }
                    await this.startUniversalHub();
                    break;
                    
                case 'git-memory':
                    if (this.processes.has('git-memory')) {
                        this.processes.get('git-memory').kill();
                        await new Promise(resolve => setTimeout(resolve, 2000));
                    }
                    await this.startGitMemoryCoordinator();
                    break;
                    
                case 'data-integration':
                    if (this.subsystems.dataIntegration) {
                        await this.subsystems.dataIntegration.shutdown();
                    }
                    this.subsystems.dataIntegration = new NexusDataIntegration();
                    await this.subsystems.dataIntegration.initialize();
                    break;
                    
                default:
                    throw new Error(`‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏¢: ${subsystemName}`);
            }
            
            console.log(`‚úÖ Restart ${subsystemName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
            
            return {
                success: true,
                message: `Restart ${subsystemName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
                timestamp: new Date()
            };
            
        } catch (error) {
            console.error(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ restart ${subsystemName}:`, error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    startHealthMonitoring() {
        this.healthCheckInterval = setInterval(() => {
            this.performHealthCheck().catch(error => {
                console.error('‚ùå Health check ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
            });
        }, this.config.healthCheckInterval);
        
        console.log(`üè• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Health Monitoring (‡∏ó‡∏∏‡∏Å ${this.config.healthCheckInterval/1000} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)`);
    }

    startDataBackup() {
        this.backupInterval = setInterval(() => {
            this.createDataBackup().catch(error => {
                console.error('‚ùå Auto backup ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
            });
        }, this.config.dataBackupInterval);
        
        console.log(`üíæ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Auto Backup (‡∏ó‡∏∏‡∏Å ${this.config.dataBackupInterval/1000/60} ‡∏ô‡∏≤‡∏ó‡∏µ)`);
    }

    async displaySystemStatus() {
        const status = await this.getSystemStatus();
        
        console.log('\nüìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö NEXUS Master Control:');
        console.log(`   üü¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å: ${status.system.status}`);
        console.log(`   ‚è±Ô∏è  Uptime: ${status.system.uptimeFormatted}`);
        console.log(`   üîó ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: ${status.connections}`);
        console.log(`   üîß ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£: ${status.processes.length}`);
        console.log('\nüîß ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏¢:');
        Object.entries(status.subsystems).forEach(([name, status]) => {
            const icon = status === 'running' ? 'üü¢' : 'üî¥';
            console.log(`   ${icon} ${name}: ${status}`);
        });
    }

    formatUptime(ms) {
        const seconds = Math.floor(ms / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);
        
        if (days > 0) return `${days}d ${hours % 24}h ${minutes % 60}m`;
        if (hours > 0) return `${hours}h ${minutes % 60}m ${seconds % 60}s`;
        if (minutes > 0) return `${minutes}m ${seconds % 60}s`;
        return `${seconds}s`;
    }

    sendToConnection(connectionId, message) {
        const connection = this.connections.get(connectionId);
        if (connection && connection.ws.readyState === WebSocket.OPEN) {
            connection.ws.send(JSON.stringify(message));
        }
    }

    broadcastToAll(message) {
        for (const [connectionId, connection] of this.connections) {
            if (connection.ws.readyState === WebSocket.OPEN) {
                connection.ws.send(JSON.stringify(message));
            }
        }
    }

    async getRequestBody(req) {
        return new Promise((resolve, reject) => {
            let body = '';
            req.on('data', chunk => body += chunk);
            req.on('end', () => {
                try {
                    resolve(JSON.parse(body));
                } catch (error) {
                    reject(error);
                }
            });
        });
    }

    async getControlPanel() {
        return `
<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NEXUS Master Control Panel</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: #0a0a0a; color: #fff; }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; margin-bottom: 30px; }
        .header h1 { color: #00ff88; font-size: 2.5em; margin-bottom: 10px; }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .stat-card { background: #1a1a1a; border: 1px solid #333; border-radius: 10px; padding: 20px; }
        .stat-card h3 { color: #00ff88; margin-bottom: 15px; }
        .stat-value { font-size: 2em; font-weight: bold; color: #fff; }
        .stat-label { color: #888; font-size: 0.9em; }
        .status-indicator { display: inline-block; width: 10px; height: 10px; border-radius: 50%; margin-right: 8px; }
        .status-running { background: #00ff88; }
        .status-stopped { background: #ff4444; }
        .controls { display: flex; gap: 10px; flex-wrap: wrap; margin-top: 20px; }
        .btn { padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; font-weight: bold; }
        .btn-primary { background: #00ff88; color: #000; }
        .btn-secondary { background: #333; color: #fff; }
        .btn:hover { opacity: 0.8; }
        .log-container { background: #1a1a1a; border: 1px solid #333; border-radius: 10px; padding: 20px; height: 300px; overflow-y: auto; }
        .log-entry { margin-bottom: 5px; font-family: monospace; font-size: 0.9em; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÄ NEXUS Master Control</h1>
            <p>‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏•‡∏±‡∏Å MCP Servers ‡∏ó‡∏±‡πâ‡∏á 3000 ‡∏ï‡∏±‡∏ß</p>
        </div>
        
        <div class="stats-grid" id="statsGrid">
            <div class="stat-card">
                <h3>üñ•Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å</h3>
                <div class="stat-value" id="systemStatus">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>
                <div class="stat-label">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö</div>
            </div>
            <div class="stat-card">
                <h3>üîó ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠</h3>
                <div class="stat-value" id="connections">0</div>
                <div class="stat-label">‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
            </div>
            <div class="stat-card">
                <h3>üìä MCP Servers</h3>
                <div class="stat-value" id="mcpServers">3000</div>
                <div class="stat-label">‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
            </div>
            <div class="stat-card">
                <h3>‚è±Ô∏è Uptime</h3>
                <div class="stat-value" id="uptime">0s</div>
                <div class="stat-label">‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</div>
            </div>
        </div>
        
        <div class="controls">
            <button class="btn btn-primary" onclick="performHealthCheck()">üè• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</button>
            <button class="btn btn-secondary" onclick="createBackup()">üíæ ‡∏™‡∏£‡πâ‡∏≤‡∏á Backup</button>
            <button class="btn btn-secondary" onclick="refreshStats()">üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä</button>
        </div>
        
        <div style="margin-top: 30px;">
            <h3>üìã System Logs</h3>
            <div class="log-container" id="logContainer">
                <div class="log-entry">üöÄ NEXUS Master Control ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...</div>
            </div>
        </div>
    </div>
    
    <script>
        let ws = null;
        
        function connectWebSocket() {
            ws = new WebSocket('ws://localhost:${this.port}');
            
            ws.onopen = () => {
                addLog('üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                refreshStats();
            };
            
            ws.onmessage = (event) => {
                const data = JSON.parse(event.data);
                handleWebSocketMessage(data);
            };
            
            ws.onclose = () => {
                addLog('üîå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket ‡∏õ‡∏¥‡∏î');
                setTimeout(connectWebSocket, 3000);
            };
        }
        
        function handleWebSocketMessage(data) {
            switch (data.type) {
                case 'master_welcome':
                    updateStats(data.data.systemStats);
                    break;
                case 'get_system_status_response':
                    updateStats(data.data.stats);
                    updateSystemStatus(data.data);
                    break;
                case 'health_check_completed':
                    addLog('üè• ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ' + data.data.overall);
                    break;
            }
        }
        
        function updateStats(stats) {
            document.getElementById('connections').textContent = stats.totalConnections || 0;
            document.getElementById('mcpServers').textContent = stats.totalServers || 3000;
        }
        
        function updateSystemStatus(status) {
            const systemStatusEl = document.getElementById('systemStatus');
            const uptimeEl = document.getElementById('uptime');
            
            systemStatusEl.textContent = status.system.status;
            uptimeEl.textContent = status.system.uptimeFormatted;
        }
        
        function refreshStats() {
            if (ws && ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify({ type: 'get_system_status' }));
            }
        }
        
        function performHealthCheck() {
            if (ws && ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify({ type: 'perform_health_check' }));
                addLog('üè• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û...');
            }
        }
        
        function createBackup() {
            if (ws && ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify({ type: 'create_backup' }));
                addLog('üíæ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á backup...');
            }
        }
        
        function addLog(message) {
            const logContainer = document.getElementById('logContainer');
            const logEntry = document.createElement('div');
            logEntry.className = 'log-entry';
            logEntry.textContent = new Date().toLocaleTimeString() + ' - ' + message;
            logContainer.appendChild(logEntry);
            logContainer.scrollTop = logContainer.scrollHeight;
        }
        
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        connectWebSocket();
        
        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        setInterval(refreshStats, 5000);
    </script>
</body>
</html>
        `;
    }

    async shutdown() {
        console.log('üõë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î NEXUS Master Control...');
        
        // ‡∏õ‡∏¥‡∏î intervals
        if (this.healthCheckInterval) clearInterval(this.healthCheckInterval);
        if (this.backupInterval) clearInterval(this.backupInterval);
        
        // ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏¢
        if (this.subsystems.dataIntegration) {
            await this.subsystems.dataIntegration.shutdown();
        }
        
        // ‡∏õ‡∏¥‡∏î‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£
        for (const [name, process] of this.processes) {
            console.log(`üîå ‡∏õ‡∏¥‡∏î ${name}...`);
            process.kill();
        }
        
        // ‡∏õ‡∏¥‡∏î server
        if (this.server) {
            this.server.close();
        }
        
        console.log('‚úÖ NEXUS Master Control ‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    }
}

// Export ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô
module.exports = NexusMasterControl;

// ‡∏ñ‡πâ‡∏≤‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
    const masterControl = new NexusMasterControl();
    
    masterControl.initialize().catch(error => {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô NEXUS Master Control:', error);
        process.exit(1);
    });
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ graceful shutdown
    process.on('SIGINT', async () => {
        await masterControl.shutdown();
        process.exit(0);
    });
}