# ðŸš€ NEXUS IDE - Docker Compose Configuration
# Complete deployment setup for production and development

version: '3.8'

services:
  # ============================================================================
  # NEXUS IDE Main Application
  # ============================================================================
  nexus-ide:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: nexus-ide-app
    restart: unless-stopped
    ports:
      - "3000:3000"    # Main API Gateway
      - "3001:3001"    # WebSocket Server
    environment:
      - NODE_ENV=production
      - PORT=3000
      - WS_PORT=3001
      - LOG_LEVEL=info
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://nexus:nexus_password@postgres:5432/nexus_db
      - MONGODB_URL=mongodb://mongo:27017/nexus
      - NEXUS_DATA_DIR=/app/data
      - NEXUS_LOG_DIR=/app/logs
      - NEXUS_TEMP_DIR=/app/temp
      - AI_PROVIDER=openai
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - nexus_data:/app/data
      - nexus_logs:/app/logs
      - nexus_temp:/app/temp
      - nexus_uploads:/app/uploads
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - redis
      - postgres
      - mongo
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ============================================================================
  # Redis Cache & Session Store
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: nexus-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # PostgreSQL Database
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: nexus-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=nexus_db
      - POSTGRES_USER=nexus
      - POSTGRES_PASSWORD=nexus_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nexus -d nexus_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # MongoDB for Document Storage
  # ============================================================================
  mongo:
    image: mongo:6
    container_name: nexus-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=nexus
      - MONGO_INITDB_ROOT_PASSWORD=nexus_mongo_password
      - MONGO_INITDB_DATABASE=nexus
    volumes:
      - mongo_data:/data/db
      - ./mongo/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Elasticsearch for Advanced Search
  # ============================================================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: nexus-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # NGINX Reverse Proxy & Load Balancer
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: nexus-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nexus_logs:/var/log/nginx
    depends_on:
      - nexus-ide
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Prometheus Monitoring
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: nexus-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - nexus-network

  # ============================================================================
  # Grafana Dashboard
  # ============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: nexus-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - nexus-network

  # ============================================================================
  # Development Environment (Optional)
  # ============================================================================
  nexus-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: nexus-ide-dev
    restart: unless-stopped
    ports:
      - "3002:3000"    # Dev API Gateway
      - "3003:3001"    # Dev WebSocket
      - "9229:9229"    # Debug Port
    environment:
      - NODE_ENV=development
      - DEBUG=nexus:*
      - PORT=3000
      - WS_PORT=3001
    volumes:
      - .:/app
      - /app/node_modules
      - nexus_dev_data:/app/data
    depends_on:
      - redis
      - postgres
      - mongo
    networks:
      - nexus-network
    profiles:
      - dev

# ============================================================================
# Networks
# ============================================================================
networks:
  nexus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# Volumes
# ============================================================================
volumes:
  nexus_data:
    driver: local
  nexus_logs:
    driver: local
  nexus_temp:
    driver: local
  nexus_uploads:
    driver: local
  nexus_dev_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  mongo_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ============================================================================
# Environment Variables Template
# Create .env file with these variables:
# ============================================================================
# OPENAI_API_KEY=your_openai_api_key
# ANTHROPIC_API_KEY=your_anthropic_api_key
# GOOGLE_API_KEY=your_google_api_key
# JWT_SECRET=your_jwt_secret_key
# ENCRYPTION_KEY=your_encryption_key
# REDIS_PASSWORD=your_redis_password
# GRAFANA_PASSWORD=your_grafana_password
# ============================================================================