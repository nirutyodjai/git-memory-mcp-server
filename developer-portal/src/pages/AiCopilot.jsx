import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';

export default function AiCopilot() {
  const navigate = useNavigate();
  const [prompt, setPrompt] = useState('');
  const [messages, setMessages] = useState([
    { role: 'system', content: 'NEXUS AI Copilot is ready. Ask me anything about your codebase.' },
  ]);

  const getFilesMap = () => JSON.parse(localStorage.getItem('nexus.ide.files') || '{}');
  const setFilesMap = (map) => localStorage.setItem('nexus.ide.files', JSON.stringify(map));
  const extractFirstCodeBlock = (text) => {
    const match = text.match(/```[\s\S]*?\n([\s\S]*?)```/);
    return match ? match[1] : text;
  };
  const saveToIDE = (suggestedName, content, openAfter = false) => {
    const name = window.prompt('Save to IDE as...', suggestedName);
    if (!name) return;
    const map = getFilesMap();
    map[name] = content;
    setFilesMap(map);
    localStorage.setItem('nexus.ide.editor.current', content);
    if (openAfter) navigate('/ide');
    alert(`Saved to IDE: ${name}`);
  };

  const send = (e) => {
    e.preventDefault();
    const text = prompt.trim();
    if (!text) return;
    setMessages((m) => [...m, { role: 'user', content: text }]);
    setPrompt('');

    // Very light mock generation: return code when it sounds like a request to generate code
    const lower = text.toLowerCase();
    const wantsCode = /(component|hook|function|class|api|service)/.test(lower);
    let assistant;
    if (wantsCode) {
      const code = `export function GeneratedComponent(){\n  return <div className=\"p-3 rounded bg-indigo-50\">Generated by NEXUS Copilot</div>;\n}`;
      assistant = [
        'Here is a starter component you can save to your project.',
        '',
        '```tsx',
        code,
        '```',
        '',
        'Tip: Use the Save to IDE action below to store it in the embedded IDE.'
      ].join('\n');
    } else {
      assistant = 'Mock response. In production, this connects to Git Memory MCP + LLM to generate contextual answers and code.';
    }
    setTimeout(() => {
      setMessages((m) => [...m, { role: 'assistant', content: assistant }]);
    }, 250);
  };

  const onQuick = (q) => setPrompt(q);

  return (
    <div className="grid grid-cols-12 gap-4">
      <section className="col-span-12 lg:col-span-8 bg-white rounded shadow p-4 flex flex-col min-h-[70vh]">
        <div className="font-semibold mb-2">AI Copilot</div>
        <div className="flex-1 overflow-auto space-y-3 pr-1">
          {messages.map((m, i) => {
            const isAssistant = m.role === 'assistant';
            return (
              <div key={i} className={isAssistant ? 'bg-indigo-50 p-2 rounded' : m.role === 'system' ? 'bg-gray-50 p-2 rounded' : 'bg-white border p-2 rounded'}>
                <div className="text-[11px] uppercase tracking-wide text-gray-500 mb-1">{m.role}</div>
                <div className="text-sm whitespace-pre-wrap">{m.content}</div>
                {isAssistant && (
                  <div className="mt-2 flex flex-wrap gap-2">
                    <button
                      onClick={() => saveToIDE('src/components/GeneratedComponent.tsx', extractFirstCodeBlock(m.content), false)}
                      className="px-2 py-1 rounded bg-gray-900 text-white text-xs"
                    >Save to IDE</button>
                    <button
                      onClick={() => saveToIDE('src/components/GeneratedComponent.tsx', extractFirstCodeBlock(m.content), true)}
                      className="px-2 py-1 rounded bg-indigo-600 hover:bg-indigo-700 text-white text-xs"
                    >Save & Open in IDE</button>
                  </div>
                )}
              </div>
            );
          })}
        </div>
        <form onSubmit={send} className="mt-3 flex gap-2">
          <input value={prompt} onChange={(e)=>setPrompt(e.target.value)} className="flex-1 border rounded px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500" placeholder="Ask the Copilot..." />
          <button type="submit" className="px-3 py-2 rounded bg-indigo-600 hover:bg-indigo-700 text-white text-sm font-semibold">Send</button>
        </form>
      </section>
      <aside className="col-span-12 lg:col-span-4 space-y-4">
        <div className="bg-white rounded shadow p-4">
          <div className="font-semibold mb-2">Quick Prompts</div>
          <ul className="text-sm text-gray-700 list-disc pl-5 space-y-1">
            <li className="cursor-pointer hover:text-indigo-700" onClick={()=>onQuick('Generate a React component named UserCard with props: name, role')}>Generate UserCard component</li>
            <li className="cursor-pointer hover:text-indigo-700" onClick={()=>onQuick('Create a React hook useDebounce(value, delay)')}>Create debounce hook</li>
            <li className="cursor-pointer hover:text-indigo-700" onClick={()=>onQuick('Explain the purpose of src/App.jsx in this project')}>Explain src/App.jsx</li>
          </ul>
        </div>
      </aside>
    </div>
  );
}