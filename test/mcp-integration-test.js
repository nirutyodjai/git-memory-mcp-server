/**
 * MCP Integration Test - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á MCP Integration
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢: NEXUS IDE AI Assistant
 */

const { AIBuilderSystem } = require('../src/ai/ai-builder-system');
const { MCPServerManager } = require('../src/services/mcp-server-manager');
const { MCPClient } = require('../src/services/mcp-client');

async function testMCPIntegration() {
    console.log('üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö MCP Integration...');
    console.log('=' .repeat(50));
    
    try {
        // 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö MCP Client
        console.log('\n1Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö MCP Client');
        const mcpClient = new MCPClient();
        await mcpClient.initialize();
        console.log('‚úÖ MCP Client ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        
        // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö MCP Server Manager
        console.log('\n2Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö MCP Server Manager');
        const serverManager = new MCPServerManager({
            configPath: './config/mcp-servers.json'
        });
        await serverManager.initialize();
        console.log('‚úÖ MCP Server Manager ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        
        // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Builder System ‡∏û‡∏£‡πâ‡∏≠‡∏° MCP
        console.log('\n3Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Builder System ‡∏û‡∏£‡πâ‡∏≠‡∏° MCP Integration');
        const aiSystem = new AIBuilderSystem({
            name: 'NEXUS AI with MCP',
            description: 'AI ‡∏ó‡∏µ‡πà‡∏°‡∏µ MCP capabilities ‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô',
            capabilities: ['chat', 'code-generation', 'file-management', 'web-search'],
            personality: {
                style: 'professional',
                language: 'th',
                expertise: ['programming', 'system-design', 'ai-development']
            }
        });
        
        await aiSystem.initialize();
        console.log('‚úÖ AI Builder System ‡∏û‡∏£‡πâ‡∏≠‡∏° MCP ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        
        // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MCP Servers
        console.log('\n4Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MCP Servers');
        const connectedServers = aiSystem.getMCPServers();
        console.log(`üì° ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ${Object.keys(connectedServers).length} servers:`);
        
        for (const [serverName, server] of Object.entries(connectedServers)) {
            console.log(`   - ${serverName}: ${server.status} (${server.toolCount} tools)`);
        }
        
        // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö MCP Tools
        console.log('\n5Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö MCP Tools ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ');
        const availableTools = aiSystem.getAvailableMCPTools();
        console.log(`üîß ‡∏°‡∏µ ${availableTools.length} tools ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:`);
        
        availableTools.slice(0, 10).forEach((tool, index) => {
            console.log(`   ${index + 1}. ${tool.name} (${tool.server}) - ${tool.description || 'No description'}`);
        });
        
        if (availableTools.length > 10) {
            console.log(`   ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${availableTools.length - 10} tools`);
        }
        
        // 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô MCP Tools
        console.log('\n6Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô MCP Tools');
        
        try {
            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö memory search
            console.log('   üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö memory search...');
            const memoryResult = await aiSystem.searchInMemory('test query');
            console.log('   ‚úÖ Memory search ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
        } catch (error) {
            console.log('   ‚ö†Ô∏è Memory search ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°:', error.message);
        }
        
        try {
            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö file operations
            console.log('   üìÅ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö file operations...');
            const fileResult = await aiSystem.performFileOperation('list', { path: '.' });
            console.log('   ‚úÖ File operations ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
        } catch (error) {
            console.log('   ‚ö†Ô∏è File operations ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°:', error.message);
        }
        
        // 7. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        console.log('\n7Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
        const testMessage = '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô JavaScript ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏•‡∏Ç‡∏ü‡∏µ‡πÇ‡∏ö‡∏ô‡∏±‡∏Å‡∏ä‡∏µ';
        
        console.log(`   üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö: "${testMessage}"`);
        
        const response = await aiSystem.processMessage(testMessage, {
            userId: 'test-user',
            sessionId: 'test-session',
            timestamp: new Date().toISOString()
        });
        
        console.log('   ü§ñ ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á:');
        console.log(`   ${response.response}`);
        console.log(`   üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: ${response.confidence}`);
        console.log(`   ‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: ${response.processingTime}ms`);
        
        // 8. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        console.log('\n8Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°');
        const stats = aiSystem.getStats();
        console.log('   üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö:');
        console.log(`   - ‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö: ${stats.interactions}`);
        console.log(`   - ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ: ${stats.learningEvents}`);
        console.log(`   - ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥: ${stats.memoryUsage}`);
        console.log(`   - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ${stats.uptime}ms`);
        
        // 9. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° MCP Server ‡πÉ‡∏´‡∏°‡πà
        console.log('\n9Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° MCP Server ‡πÉ‡∏´‡∏°‡πà');
        const newServerConfig = {
            name: 'test-server',
            description: 'Test MCP Server',
            type: 'stdio',
            command: 'node',
            args: ['test-server.js'],
            capabilities: ['test'],
            enabled: false
        };
        
        const addResult = await aiSystem.addMCPServer(newServerConfig);
        console.log(`   ${addResult ? '‚úÖ' : '‚ùå'} ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° server ‡πÉ‡∏´‡∏°‡πà: ${addResult ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}`);
        
        // 10. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        console.log('\nüéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö MCP Integration');
        console.log('=' .repeat(50));
        console.log('‚úÖ MCP Client: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
        console.log('‚úÖ MCP Server Manager: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
        console.log('‚úÖ AI Builder System Integration: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
        console.log('‚úÖ MCP Tools Loading: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
        console.log('‚úÖ Message Processing: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
        console.log('‚úÖ Statistics Tracking: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
        console.log('‚úÖ Dynamic Server Management: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
        
        console.log('\nüéâ MCP Integration ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!');
        
        // ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö
        await aiSystem.stop();
        await serverManager.shutdown();
        
    } catch (error) {
        console.error('\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error);
        console.error('Stack trace:', error.stack);
        process.exit(1);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ MCP Tools
async function testSpecificMCPTools() {
    console.log('\nüîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö MCP Tools ‡πÄ‡∏â‡∏û‡∏≤‡∏∞');
    console.log('=' .repeat(30));
    
    const serverManager = new MCPServerManager();
    await serverManager.initialize();
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö tools ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    const testCases = [
        {
            name: 'ping',
            params: {},
            description: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'
        },
        {
            name: 'memory_search',
            params: { query: 'test' },
            description: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥'
        },
        {
            name: 'file_list',
            params: { path: '.' },
            description: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå'
        }
    ];
    
    for (const testCase of testCases) {
        try {
            console.log(`\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ${testCase.name}: ${testCase.description}`);
            const result = await serverManager.callTool(testCase.name, testCase.params);
            console.log(`‚úÖ ${testCase.name} ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ:`, JSON.stringify(result, null, 2).substring(0, 200) + '...');
        } catch (error) {
            console.log(`‚ö†Ô∏è ${testCase.name} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°:`, error.message);
        }
    }
    
    await serverManager.shutdown();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MCP Configuration
function showMCPConfiguration() {
    console.log('\n‚öôÔ∏è MCP Configuration');
    console.log('=' .repeat(25));
    
    const config = {
        'MCP Client': {
            'WebSocket Support': '‚úÖ',
            'STDIO Support': '‚úÖ',
            'Auto Reconnect': '‚úÖ',
            'Event Handling': '‚úÖ'
        },
        'MCP Server Manager': {
            'Multi-Server Support': '‚úÖ',
            'Health Monitoring': '‚úÖ',
            'Dynamic Loading': '‚úÖ',
            'Configuration Management': '‚úÖ'
        },
        'AI Integration': {
            'Tool Discovery': '‚úÖ',
            'Capability Mapping': '‚úÖ',
            'Context Awareness': '‚úÖ',
            'Error Handling': '‚úÖ'
        }
    };
    
    for (const [category, features] of Object.entries(config)) {
        console.log(`\nüìã ${category}:`);
        for (const [feature, status] of Object.entries(features)) {
            console.log(`   ${status} ${feature}`);
        }
    }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
if (require.main === module) {
    async function runAllTests() {
        showMCPConfiguration();
        await testMCPIntegration();
        await testSpecificMCPTools();
        
        console.log('\nüèÅ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
        process.exit(0);
    }
    
    runAllTests().catch(error => {
        console.error('‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        process.exit(1);
    });
}

module.exports = {
    testMCPIntegration,
    testSpecificMCPTools,
    showMCPConfiguration
};