# Copilot Instructions for `git-memory-mcp-server`

This document provides guidance for AI coding agents working on the `git-memory-mcp-server` repository. It outlines the project's architecture, workflows, conventions, and integration points to help agents be productive.

---

## Project Overview

### Architecture
- **Monorepo Structure**: The repository is organized into multiple apps (`desktop`, `mobile`, `web`) under the `apps/` directory.
- **Web Application**: The `web/` directory contains a Vite-based frontend (`vite.config.ts`) with TypeScript configurations (`tsconfig.json`, `tsconfig.node.json`).
- **Shared Code**: Shared logic and utilities are likely centralized in the `git-memory/` directory.
- **Logs**: Runtime logs are stored in the `logs/` directory for debugging and monitoring.

### Key Components
- **Frontend**: Located in `apps/web/`, it includes an `index.html` entry point and a `package.json` for managing dependencies.
- **Desktop and Mobile**: These directories (`apps/desktop/`, `apps/mobile/`) likely contain platform-specific implementations.
- **Configuration Files**: 
  - `tsconfig.json`: TypeScript configuration for the entire project.
  - `pnpm-lock.yaml`: Dependency lock file, indicating the use of `pnpm` as the package manager.

---

## Developer Workflows

### Build and Run
- **Install Dependencies**: Use `pnpm install` to install dependencies across all apps.
- **Build**: Run `pnpm build` to build the project.
- **Start Development Server**: Navigate to `apps/web/` and run `pnpm dev` to start the Vite development server.

### Testing
- **Test Commands**: Add specific test commands here if available in the `package.json` scripts.

### Debugging
- **Logs**: Check the `logs/` directory for runtime logs.
- **Frontend Debugging**: Use browser developer tools when working on the `web/` app.

---

## Project-Specific Conventions

- **TypeScript**: The project uses TypeScript extensively. Follow the configurations in `tsconfig.json`.
- **Package Manager**: Use `pnpm` for dependency management.
- **Frontend Framework**: The `web/` app uses Vite for fast builds and hot module replacement.

---

## Integration Points

- **External Dependencies**: Dependencies are managed via `pnpm`. Check `package.json` files for details.
- **Cross-Component Communication**: Shared logic is likely in `git-memory/`. Ensure changes here do not break other apps.

---

## Examples and Patterns

- **Frontend Entry Point**: `apps/web/index.html` serves as the main entry point for the web app.
- **Configuration Example**: `apps/web/vite.config.ts` demonstrates how the Vite build tool is configured.

---

## Notes for AI Agents

- **Be Context-Aware**: Changes in shared directories like `git-memory/` may impact multiple apps.
- **Follow Existing Patterns**: Adhere to the structure and conventions observed in the codebase.
- **Ask for Clarifications**: If a task is ambiguous, request additional context or examples.

---

Let me know if any sections need clarification