/**
 * AI Builder System - ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á AI ‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏≠‡∏á
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢: NEXUS IDE AI Assistant
 * ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: 2024
 */

const EventEmitter = require('events');
const fs = require('fs').promises;
const path = require('path');
const { MCPClient } = require('../services/mcp-client');
const { MCPServerManager } = require('../services/mcp-server-manager');

class AIBuilderSystem extends EventEmitter {
    constructor(options = {}) {
        super();
        
        // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        this.config = {
            name: options.name || 'Custom AI',
            version: '1.0.0',
            description: options.description || 'AI ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
            capabilities: options.capabilities || [],
            memory: {
                enabled: true,
                maxSize: '1GB',
                persistent: true
            },
            learning: {
                enabled: true,
                adaptiveMode: true,
                feedbackLoop: true
            },
            personality: {
                style: options.personality?.style || 'friendly',
                language: options.personality?.language || 'th',
                expertise: options.personality?.expertise || []
            }
        };
        
        // ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
        this.brain = new AIBrain(this.config);
        this.memory = new AIMemorySystem(this.config.memory);
        this.learningEngine = new AILearningEngine(this.config.learning);
        this.personalityEngine = new AIPersonalityEngine(this.config.personality);
        
        // ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô
        this.plugins = new Map();
        this.customModules = new Map();
        
        // MCP Integration
        this.mcpClient = new MCPClient();
        this.mcpServerManager = new MCPServerManager();
        this.mcpCapabilities = new Map();
        
        // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        this.isInitialized = false;
        this.isRunning = false;
        this.stats = {
            interactions: 0,
            learningEvents: 0,
            memoryUsage: 0,
            uptime: 0
        };
        
        console.log(`ü§ñ AI Builder System initialized: ${this.config.name}`);
    }
    
    /**
     * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö AI
     */
    async initialize() {
        try {
            console.log('üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö AI Builder...');
            
            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏¢
            await this.brain.initialize();
            await this.memory.initialize();
            await this.learningEngine.initialize();
            await this.personalityEngine.initialize();
            
            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MCP System
            await this.initializeMCP();
            
            // ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            await this.loadPlugins();
            await this.loadCustomModules();
            
            this.isInitialized = true;
            this.emit('initialized');
            
            console.log('‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö AI Builder ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
            return true;
            
        } catch (error) {
            console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:', error);
            throw error;
        }
    }
    
    /**
     * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á AI
     */
    async start() {
        if (!this.isInitialized) {
            await this.initialize();
        }
        
        this.isRunning = true;
        this.stats.startTime = Date.now();
        
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
        this.learningEngine.start();
        
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        this.startMonitoring();
        
        this.emit('started');
        console.log('üü¢ AI ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
    }
    
    /**
     * ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á AI
     */
    async stop() {
        this.isRunning = false;
        
        // ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
        this.learningEngine.stop();
        this.stopMonitoring();
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await this.saveState();
        
        this.emit('stopped');
        console.log('üî¥ AI ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
    }
    
    /**
     * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
     */
    async processMessage(message, context = {}) {
        if (!this.isRunning) {
            throw new Error('AI ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
        }
        
        try {
            this.stats.interactions++;
            
            // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            const analysis = await this.brain.analyzeMessage(message, context);
            
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
            const memoryData = await this.memory.search(message);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö
            const personalityContext = this.personalityEngine.getContext();
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
            const response = await this.brain.generateResponse({
                message,
                analysis,
                memoryData,
                personalityContext,
                context
            });
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö
            await this.memory.store({
                input: message,
                output: response,
                timestamp: Date.now(),
                context
            });
            
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö
            this.learningEngine.learn({
                message,
                response,
                context,
                feedback: null // ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å feedback ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
            });
            
            this.emit('messageProcessed', { message, response });
            return response;
            
        } catch (error) {
            console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•:', error);
            throw error;
        }
    }
    
    /**
     * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ AI
     */
    async addCapability(name, capability) {
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ
            if (!capability.execute || typeof capability.execute !== 'function') {
                throw new Error('Capability ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ execute function');
            }
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ
            this.brain.addCapability(name, capability);
            this.config.capabilities.push(name);
            
            console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ "${name}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
            this.emit('capabilityAdded', { name, capability });
            
        } catch (error) {
            console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ "${name}":`, error);
            throw error;
        }
    }
    
    /**
     * ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô
     */
    async installPlugin(pluginName, pluginCode) {
        try {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô
            const plugin = new AIPlugin(pluginName, pluginCode);
            await plugin.initialize();
            
            // ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
            this.plugins.set(pluginName, plugin);
            
            console.log(`üîå ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô "${pluginName}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
            this.emit('pluginInstalled', { pluginName, plugin });
            
        } catch (error) {
            console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô "${pluginName}":`, error);
            throw error;
        }
    }
    
    /**
     * ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û
     */
    updatePersonality(personalityConfig) {
        this.config.personality = { ...this.config.personality, ...personalityConfig };
        this.personalityEngine.updateConfig(this.config.personality);
        
        console.log('üé≠ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
        this.emit('personalityUpdated', personalityConfig);
    }
    
    /**
     * ‡πÉ‡∏´‡πâ feedback ‡∏Å‡∏±‡∏ö AI
     */
    async provideFeedback(interactionId, feedback) {
        try {
            await this.learningEngine.processFeedback(interactionId, feedback);
            console.log('üìù ‡∏£‡∏±‡∏ö feedback ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
            this.emit('feedbackReceived', { interactionId, feedback });
            
        } catch (error) {
            console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• feedback:', error);
            throw error;
        }
    }
    
    /**
     * ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
     */
    getStats() {
        const currentTime = Date.now();
        const uptime = this.stats.startTime ? currentTime - this.stats.startTime : 0;
        
        return {
            ...this.stats,
            uptime,
            memoryUsage: this.memory.getUsage(),
            capabilities: this.config.capabilities.length,
            plugins: this.plugins.size,
            isRunning: this.isRunning
        };
    }
    
    /**
     * ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AI
     */
    async exportConfig() {
        const config = {
            ...this.config,
            plugins: Array.from(this.plugins.keys()),
            customModules: Array.from(this.customModules.keys()),
            stats: this.getStats()
        };
        
        return JSON.stringify(config, null, 2);
    }
    
    /**
     * ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AI
     */
    async importConfig(configString) {
        try {
            const config = JSON.parse(configString);
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
            this.config = { ...this.config, ...config };
            
            // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö
            if (this.isRunning) {
                await this.stop();
                await this.start();
            }
            
            console.log('üì• ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
            this.emit('configImported', config);
            
        } catch (error) {
            console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:', error);
            throw error;
        }
    }
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    async loadPlugins() {
        // ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        console.log('üîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô...');
    }
    
    async loadCustomModules() {
        // ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
        console.log('üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á...');
    }
    
    /**
     * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö MCP
     */
    async initializeMCP() {
        try {
            console.log('üîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö MCP...');
            
            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MCP Client ‡πÅ‡∏•‡∏∞ Server Manager
            await this.mcpClient.initialize();
            await this.mcpServerManager.initialize();
            
            // ‡πÇ‡∏´‡∏•‡∏î MCP Servers ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            await this.loadMCPServers();
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° MCP capabilities ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö AI Brain
            this.addMCPCapabilities();
            
            console.log('‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö MCP ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
            
        } catch (error) {
            console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MCP:', error);
            // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πâ MCP ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°
        }
    }

    /**
     * ‡πÇ‡∏´‡∏•‡∏î MCP Servers
     */
    async loadMCPServers() {
        const defaultServers = [
            {
                name: 'git-memory',
                command: 'node',
                args: ['src/index.js'],
                capabilities: ['memory', 'git', 'search']
            },
            {
                name: 'file-system',
                command: 'node',
                args: ['servers/file-system/server.js'],
                capabilities: ['files', 'directories']
            },
            {
                name: 'web-search',
                command: 'node', 
                args: ['servers/web-search/server.js'],
                capabilities: ['search', 'web']
            }
        ];

        for (const server of defaultServers) {
            try {
                await this.mcpServerManager.addServer(server);
                console.log(`üì° ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MCP Server: ${server.name}`);
            } catch (error) {
                console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ${server.name}:`, error.message);
            }
        }
    }

    /**
     * ‡πÄ‡∏û‡∏¥‡πà‡∏° MCP capabilities ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö AI
     */
    addMCPCapabilities() {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ MCP tools
        this.brain.addCapability('mcp_call', async (toolName, params) => {
            return await this.callMCPTool(toolName, params);
        });

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        this.brain.addCapability('search_memory', async (query) => {
            return await this.searchInMemory(query);
        });

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå
        this.brain.addCapability('file_operations', async (operation, params) => {
            return await this.performFileOperation(operation, params);
        });

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ß‡πá‡∏ö
        this.brain.addCapability('web_search', async (query) => {
            return await this.performWebSearch(query);
        });
    }

    /**
     * ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ MCP Tool
     */
    async callMCPTool(toolName, params) {
        try {
            const result = await this.mcpClient.callTool(toolName, params);
            this.stats.interactions++;
            return result;
        } catch (error) {
            console.error(`‚ùå MCP Tool Error (${toolName}):`, error);
            return { error: error.message };
        }
    }

    /**
     * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
     */
    async searchInMemory(query) {
        try {
            return await this.callMCPTool('search_memory', { query });
        } catch (error) {
            return await this.memory.search(query); // fallback to local memory
        }
    }

    /**
     * ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå
     */
    async performFileOperation(operation, params) {
        try {
            return await this.callMCPTool(`file_${operation}`, params);
        } catch (error) {
            console.error(`‚ùå File Operation Error (${operation}):`, error);
            return { error: error.message };
        }
    }

    /**
     * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ß‡πá‡∏ö
     */
    async performWebSearch(query) {
        try {
            return await this.callMCPTool('web_search', { query });
        } catch (error) {
            console.error('‚ùå Web Search Error:', error);
            return { error: error.message };
        }
    }

    /**
     * ‡πÄ‡∏û‡∏¥‡πà‡∏° MCP Server ‡πÉ‡∏´‡∏°‡πà
     */
    async addMCPServer(serverConfig) {
        try {
            await this.mcpServerManager.addServer(serverConfig);
            console.log(`üì° ‡πÄ‡∏û‡∏¥‡πà‡∏° MCP Server: ${serverConfig.name}`);
            return true;
        } catch (error) {
            console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° MCP Server:', error);
            return false;
        }
    }

    /**
     * ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ MCP Servers ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà
     */
    getMCPServers() {
        return this.mcpServerManager.getConnectedServers();
    }

    /**
     * ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ MCP Tools ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
     */
    getAvailableMCPTools() {
        return this.mcpServerManager.getAvailableTools();
    }

    startMonitoring() {
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        this.monitoringInterval = setInterval(() => {
            this.updateStats();
        }, 5000);
    }
    
    stopMonitoring() {
        if (this.monitoringInterval) {
            clearInterval(this.monitoringInterval);
        }
    }
    
    updateStats() {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        this.stats.memoryUsage = this.memory.getUsage();
    }
    
    async saveState() {
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        console.log('üíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞...');
    }
}

/**
 * ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏°‡∏≠‡∏á‡∏Ç‡∏≠‡∏á AI
 */
class AIBrain {
    constructor(config) {
        this.config = config;
        this.capabilities = new Map();
        this.processors = new Map();
    }
    
    async initialize() {
        console.log('üß† ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏°‡∏≠‡∏á AI...');
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        this.addBasicCapabilities();
    }
    
    addBasicCapabilities() {
        // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        this.addCapability('text_processing', {
            execute: async (input) => {
                return `‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${input}`;
            }
        });
        
        this.addCapability('question_answering', {
            execute: async (question) => {
                return `‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${question}`;
            }
        });
    }
    
    addCapability(name, capability) {
        this.capabilities.set(name, capability);
    }
    
    async analyzeMessage(message, context) {
        // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        return {
            intent: 'general',
            entities: [],
            sentiment: 'neutral',
            confidence: 0.8
        };
    }
    
    async generateResponse(data) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        const { message, analysis, memoryData, personalityContext } = data;
        
        // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        return `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "${message}" ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì`;
    }
}

/**
 * ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏Ç‡∏≠‡∏á AI
 */
class AIMemorySystem {
    constructor(config) {
        this.config = config;
        this.shortTermMemory = new Map();
        this.longTermMemory = new Map();
        this.workingMemory = new Map();
    }
    
    async initialize() {
        console.log('üß† ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥...');
    }
    
    async store(data) {
        const id = Date.now().toString();
        this.shortTermMemory.set(id, data);
        return id;
    }
    
    async search(query) {
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
        return [];
    }
    
    getUsage() {
        return {
            shortTerm: this.shortTermMemory.size,
            longTerm: this.longTermMemory.size,
            working: this.workingMemory.size
        };
    }
}

/**
 * ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ç‡∏≠‡∏á AI
 */
class AILearningEngine {
    constructor(config) {
        this.config = config;
        this.learningData = [];
        this.models = new Map();
    }
    
    async initialize() {
        console.log('üìö ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ...');
    }
    
    start() {
        console.log('üéì ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ...');
    }
    
    stop() {
        console.log('‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ...');
    }
    
    learn(data) {
        this.learningData.push({
            ...data,
            timestamp: Date.now()
        });
    }
    
    async processFeedback(interactionId, feedback) {
        // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• feedback
        console.log(`üìù ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• feedback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${interactionId}:`, feedback);
    }
}

/**
 * ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á AI
 */
class AIPersonalityEngine {
    constructor(config) {
        this.config = config;
        this.traits = new Map();
    }
    
    async initialize() {
        console.log('üé≠ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û...');
        this.loadPersonalityTraits();
    }
    
    loadPersonalityTraits() {
        // ‡πÇ‡∏´‡∏•‡∏î‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û
        this.traits.set('friendliness', 0.8);
        this.traits.set('helpfulness', 0.9);
        this.traits.set('creativity', 0.7);
    }
    
    updateConfig(config) {
        this.config = { ...this.config, ...config };
    }
    
    getContext() {
        return {
            style: this.config.style,
            language: this.config.language,
            traits: Object.fromEntries(this.traits)
        };
    }
}

/**
 * ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô
 */
class AIPlugin {
    constructor(name, code) {
        this.name = name;
        this.code = code;
        this.isActive = false;
    }
    
    async initialize() {
        console.log(`üîå ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô: ${this.name}`);
        this.isActive = true;
    }
    
    async execute(input) {
        if (!this.isActive) {
            throw new Error('‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
        }
        
        // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡∏≤‡∏° code ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        return `‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô ${this.name}: ${input}`;
    }
}

// ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å
module.exports = {
    AIBuilderSystem,
    AIBrain,
    AIMemorySystem,
    AILearningEngine,
    AIPersonalityEngine,
    AIPlugin
};

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
if (require.main === module) {
    async function demo() {
        console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô AI Builder System Demo...');
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á AI ‡πÉ‡∏´‡∏°‡πà
        const myAI = new AIBuilderSystem({
            name: 'My Custom AI',
            description: 'AI ‡∏ó‡∏µ‡πà‡∏â‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏á',
            personality: {
                style: 'friendly',
                language: 'th',
                expertise: ['programming', 'design']
            }
        });
        
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô
        await myAI.start();
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        const response = await myAI.processMessage('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ AI!');
        console.log('ü§ñ AI ‡∏ï‡∏≠‡∏ö:', response);
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà
        await myAI.addCapability('calculator', {
            execute: async (expression) => {
                try {
                    return eval(expression).toString();
                } catch (error) {
                    return '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ';
                }
            }
        });
        
        // ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        console.log('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ AI:', myAI.getStats());
        
        // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        setTimeout(async () => {
            await myAI.stop();
            console.log('‚úÖ Demo ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
        }, 5000);
    }
    
    demo().catch(console.error);
}