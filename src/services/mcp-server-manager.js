/**
 * MCP Server Manager - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ MCP Servers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢: NEXUS IDE AI Assistant
 */

const EventEmitter = require('events');
const { MCPClient } = require('./mcp-client');
const fs = require('fs').promises;
const path = require('path');

class MCPServerManager extends EventEmitter {
    constructor(options = {}) {
        super();
        
        this.options = {
            configPath: options.configPath || './config/mcp-servers.json',
            autoReconnect: options.autoReconnect !== false,
            healthCheckInterval: options.healthCheckInterval || 30000,
            ...options
        };
        
        this.client = new MCPClient();
        this.servers = new Map();
        this.tools = new Map();
        this.healthCheckTimer = null;
        this.isInitialized = false;
        
        console.log('üéõÔ∏è MCP Server Manager ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    }
    
    /**
     * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Server Manager
     */
    async initialize() {
        try {
            console.log('üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MCP Server Manager...');
            
            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MCP Client
            await this.client.initialize();
            
            // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ servers
            await this.loadServerConfig();
            
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event handlers
            this.setupEventHandlers();
            
            // ‡πÄ‡∏£‡∏¥‡πà‡∏° health check
            this.startHealthCheck();
            
            this.isInitialized = true;
            this.emit('initialized');
            
            console.log('‚úÖ MCP Server Manager ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
            
        } catch (error) {
            console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MCP Server Manager:', error);
            throw error;
        }
    }
    
    /**
     * ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ servers
     */
    async loadServerConfig() {
        try {
            const configExists = await fs.access(this.options.configPath).then(() => true).catch(() => false);
            
            if (configExists) {
                const configData = await fs.readFile(this.options.configPath, 'utf8');
                const config = JSON.parse(configData);
                
                for (const serverConfig of config.servers || []) {
                    await this.addServer(serverConfig);
                }
                
                console.log(`üìã ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ${config.servers?.length || 0} servers`);
            } else {
                console.log('üìã ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ servers, ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô');
                await this.createDefaultConfig();
            }
            
        } catch (error) {
            console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:', error);
        }
    }
    
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
     */
    async createDefaultConfig() {
        const defaultConfig = {
            version: '1.0.0',
            servers: [
                {
                    name: 'git-memory',
                    type: 'stdio',
                    command: 'node',
                    args: ['src/index.js'],
                    cwd: process.cwd(),
                    capabilities: ['memory', 'git', 'search'],
                    enabled: true
                },
                {
                    name: 'file-system',
                    type: 'stdio',
                    command: 'node',
                    args: ['servers/file-system/server.js'],
                    cwd: process.cwd(),
                    capabilities: ['files', 'directories'],
                    enabled: false
                },
                {
                    name: 'web-search',
                    type: 'stdio',
                    command: 'node',
                    args: ['servers/web-search/server.js'],
                    cwd: process.cwd(),
                    capabilities: ['search', 'web'],
                    enabled: false
                }
            ]
        };
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå config ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
        const configDir = path.dirname(this.options.configPath);
        await fs.mkdir(configDir, { recursive: true });
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        await fs.writeFile(this.options.configPath, JSON.stringify(defaultConfig, null, 2));
        
        console.log('üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    }
    
    /**
     * ‡πÄ‡∏û‡∏¥‡πà‡∏° server ‡πÉ‡∏´‡∏°‡πà
     */
    async addServer(serverConfig) {
        try {
            if (this.servers.has(serverConfig.name)) {
                console.warn(`‚ö†Ô∏è Server ${serverConfig.name} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
                return false;
            }
            
            const server = {
                ...serverConfig,
                status: 'disconnected',
                lastConnected: null,
                reconnectAttempts: 0,
                tools: new Map(),
                stats: {
                    totalCalls: 0,
                    successfulCalls: 0,
                    failedCalls: 0,
                    averageResponseTime: 0
                }
            };
            
            this.servers.set(serverConfig.name, server);
            
            // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ñ‡πâ‡∏≤ enabled
            if (serverConfig.enabled !== false) {
                await this.connectServer(serverConfig.name);
            }
            
            console.log(`üì° ‡πÄ‡∏û‡∏¥‡πà‡∏° server: ${serverConfig.name}`);
            return true;
            
        } catch (error) {
            console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° server ${serverConfig.name}:`, error);
            return false;
        }
    }
    
    /**
     * ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö server
     */
    async connectServer(serverName) {
        try {
            const server = this.servers.get(serverName);
            if (!server) {
                throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö server: ${serverName}`);
            }
            
            if (server.status === 'connected') {
                console.log(`üì° ${serverName} ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
                return true;
            }
            
            server.status = 'connecting';
            
            // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô MCP Client
            await this.client.connect(serverName, server);
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            server.status = 'connected';
            server.lastConnected = new Date();
            server.reconnectAttempts = 0;
            
            // ‡πÇ‡∏´‡∏•‡∏î tools ‡∏Ç‡∏≠‡∏á server
            await this.loadServerTools(serverName);
            
            this.emit('serverConnected', serverName);
            console.log(`‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ${serverName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
            
            return true;
            
        } catch (error) {
            const server = this.servers.get(serverName);
            if (server) {
                server.status = 'error';
                server.reconnectAttempts++;
            }
            
            console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ${serverName}:`, error);
            
            // ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô auto reconnect
            if (this.options.autoReconnect && server && server.reconnectAttempts < 3) {
                setTimeout(() => {
                    this.connectServer(serverName);
                }, 5000 * server.reconnectAttempts);
            }
            
            return false;
        }
    }
    
    /**
     * ‡πÇ‡∏´‡∏•‡∏î tools ‡∏Ç‡∏≠‡∏á server
     */
    async loadServerTools(serverName) {
        try {
            // ‡∏™‡πà‡∏á request ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ tools
            const toolsResult = await this.client.callTool('list_tools', {});
            
            const server = this.servers.get(serverName);
            if (server && toolsResult.tools) {
                for (const tool of toolsResult.tools) {
                    server.tools.set(tool.name, tool);
                    this.tools.set(tool.name, {
                        ...tool,
                        server: serverName
                    });
                }
                
                console.log(`üîß ‡πÇ‡∏´‡∏•‡∏î ${toolsResult.tools.length} tools ‡∏à‡∏≤‡∏Å ${serverName}`);
            }
            
        } catch (error) {
            console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î tools ‡∏à‡∏≤‡∏Å ${serverName}:`, error.message);
        }
    }
    
    /**
     * ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö server
     */
    async disconnectServer(serverName) {
        try {
            const server = this.servers.get(serverName);
            if (!server) {
                throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö server: ${serverName}`);
            }
            
            await this.client.disconnect(serverName);
            
            server.status = 'disconnected';
            
            // ‡∏•‡∏ö tools ‡∏Ç‡∏≠‡∏á server ‡∏ô‡∏µ‡πâ
            for (const toolName of server.tools.keys()) {
                this.tools.delete(toolName);
            }
            server.tools.clear();
            
            this.emit('serverDisconnected', serverName);
            console.log(`üì° ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ${serverName}`);
            
        } catch (error) {
            console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ${serverName}:`, error);
        }
    }
    
    /**
     * ‡∏•‡∏ö server
     */
    async removeServer(serverName) {
        await this.disconnectServer(serverName);
        this.servers.delete(serverName);
        console.log(`üóëÔ∏è ‡∏•‡∏ö server: ${serverName}`);
    }
    
    /**
     * ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ tool
     */
    async callTool(toolName, params = {}) {
        try {
            const tool = this.tools.get(toolName);
            if (!tool) {
                throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö tool: ${toolName}`);
            }
            
            const server = this.servers.get(tool.server);
            if (!server || server.status !== 'connected') {
                throw new Error(`Server ${tool.server} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠`);
            }
            
            const startTime = Date.now();
            
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ tool ‡∏ú‡πà‡∏≤‡∏ô client
            const result = await this.client.callTool(toolName, params);
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            const responseTime = Date.now() - startTime;
            server.stats.totalCalls++;
            server.stats.successfulCalls++;
            server.stats.averageResponseTime = 
                (server.stats.averageResponseTime * (server.stats.successfulCalls - 1) + responseTime) / server.stats.successfulCalls;
            
            return result;
            
        } catch (error) {
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ error
            const tool = this.tools.get(toolName);
            if (tool) {
                const server = this.servers.get(tool.server);
                if (server) {
                    server.stats.totalCalls++;
                    server.stats.failedCalls++;
                }
            }
            
            throw error;
        }
    }
    
    /**
     * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event handlers
     */
    setupEventHandlers() {
        this.client.on('connected', (serverName) => {
            this.emit('serverConnected', serverName);
        });
        
        this.client.on('disconnected', (serverName) => {
            const server = this.servers.get(serverName);
            if (server) {
                server.status = 'disconnected';
            }
            this.emit('serverDisconnected', serverName);
        });
    }
    
    /**
     * ‡πÄ‡∏£‡∏¥‡πà‡∏° health check
     */
    startHealthCheck() {
        if (this.healthCheckTimer) {
            clearInterval(this.healthCheckTimer);
        }
        
        this.healthCheckTimer = setInterval(async () => {
            await this.performHealthCheck();
        }, this.options.healthCheckInterval);
        
        console.log('üíì ‡πÄ‡∏£‡∏¥‡πà‡∏° health check');
    }
    
    /**
     * ‡∏ó‡∏≥ health check
     */
    async performHealthCheck() {
        for (const [serverName, server] of this.servers) {
            if (server.status === 'connected') {
                try {
                    // ‡∏™‡πà‡∏á ping ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
                    await this.client.callTool('ping', {});
                } catch (error) {
                    console.warn(`‚ö†Ô∏è Health check failed for ${serverName}:`, error.message);
                    server.status = 'error';
                    
                    // ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
                    if (this.options.autoReconnect) {
                        setTimeout(() => {
                            this.connectServer(serverName);
                        }, 1000);
                    }
                }
            }
        }
    }
    
    /**
     * ‡∏´‡∏¢‡∏∏‡∏î health check
     */
    stopHealthCheck() {
        if (this.healthCheckTimer) {
            clearInterval(this.healthCheckTimer);
            this.healthCheckTimer = null;
            console.log('üíì ‡∏´‡∏¢‡∏∏‡∏î health check');
        }
    }
    
    /**
     * ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ servers ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà
     */
    getConnectedServers() {
        const connected = [];
        for (const [name, server] of this.servers) {
            if (server.status === 'connected') {
                connected.push({
                    name,
                    capabilities: server.capabilities,
                    toolCount: server.tools.size,
                    stats: server.stats
                });
            }
        }
        return connected;
    }
    
    /**
     * ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ tools ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
     */
    getAvailableTools() {
        return Array.from(this.tools.values());
    }
    
    /**
     * ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á servers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
     */
    getServerStatus() {
        const status = {};
        for (const [name, server] of this.servers) {
            status[name] = {
                status: server.status,
                lastConnected: server.lastConnected,
                reconnectAttempts: server.reconnectAttempts,
                toolCount: server.tools.size,
                stats: server.stats
            };
        }
        return status;
    }
    
    /**
     * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
     */
    async saveConfig() {
        try {
            const config = {
                version: '1.0.0',
                servers: Array.from(this.servers.values()).map(server => ({
                    name: server.name,
                    type: server.type,
                    command: server.command,
                    args: server.args,
                    cwd: server.cwd,
                    capabilities: server.capabilities,
                    enabled: server.status !== 'disabled'
                }))
            };
            
            await fs.writeFile(this.options.configPath, JSON.stringify(config, null, 2));
            console.log('üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
            
        } catch (error) {
            console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:', error);
        }
    }
    
    /**
     * ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö
     */
    async shutdown() {
        console.log('üõë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö MCP Server Manager...');
        
        this.stopHealthCheck();
        await this.client.disconnectAll();
        
        this.emit('shutdown');
        console.log('‚úÖ ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö MCP Server Manager ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    }
}

module.exports = { MCPServerManager };