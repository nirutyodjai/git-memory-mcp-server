# =============================================================================
# ENTERPRISE SECURITY DASHBOARD - DOCKER COMPOSE CONFIGURATION
# =============================================================================

version: '3.8'

services:
  # ---------------------------------------------------------------------------
  # Security Dashboard Application
  # ---------------------------------------------------------------------------
  security-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: security-dashboard-app
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "3001:3001"  # WebSocket port
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=security_dashboard
      - DB_USER=postgres
      - DB_PASSWORD=secure_password_123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=security_logs
      - JWT_SECRET=your_super_secret_jwt_key_change_this_in_production
      - ENCRYPTION_KEY=your_32_character_encryption_key_here
      - SESSION_SECRET=your_super_secret_session_key_change_this_in_production
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./temp:/app/temp
      - ./ssl:/app/ssl:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_started
    networks:
      - security-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/temp:noexec,nosuid,size=500m
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.security-dashboard.rule=Host(`dashboard.yourdomain.com`)"
      - "traefik.http.routers.security-dashboard.tls=true"
      - "traefik.http.routers.security-dashboard.tls.certresolver=letsencrypt"

  # ---------------------------------------------------------------------------
  # PostgreSQL Database
  # ---------------------------------------------------------------------------
  postgres:
    image: postgres:15-alpine
    container_name: security-dashboard-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=security_dashboard
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=secure_password_123
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/backups:/backups
    ports:
      - "5432:5432"
    networks:
      - security-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d security_dashboard"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=all
      -c log_duration=on
      -c log_lock_waits=on
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on

  # ---------------------------------------------------------------------------
  # Redis Cache
  # ---------------------------------------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: security-dashboard-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - security-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    command: redis-server /usr/local/etc/redis/redis.conf
    sysctls:
      - net.core.somaxconn=1024

  # ---------------------------------------------------------------------------
  # MongoDB (Optional - for logs and analytics)
  # ---------------------------------------------------------------------------
  mongodb:
    image: mongo:6-jammy
    container_name: security-dashboard-mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=secure_mongo_password_123
      - MONGO_INITDB_DATABASE=security_logs
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init:/docker-entrypoint-initdb.d:ro
      - ./mongodb/backups:/backups
    ports:
      - "27017:27017"
    networks:
      - security-network
    security_opt:
      - no-new-privileges:true
    command: mongod --auth --bind_ip_all

  # ---------------------------------------------------------------------------
  # Nginx Reverse Proxy
  # ---------------------------------------------------------------------------
  nginx:
    image: nginx:alpine
    container_name: security-dashboard-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - security-dashboard
    networks:
      - security-network
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=false"

  # ---------------------------------------------------------------------------
  # Prometheus Monitoring
  # ---------------------------------------------------------------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: security-dashboard-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - security-network
    security_opt:
      - no-new-privileges:true

  # ---------------------------------------------------------------------------
  # Grafana Dashboard
  # ---------------------------------------------------------------------------
  grafana:
    image: grafana/grafana:latest
    container_name: security-dashboard-grafana
    restart: unless-stopped
    ports:
      - "3030:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=secure_grafana_password_123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - security-network
    security_opt:
      - no-new-privileges:true

  # ---------------------------------------------------------------------------
  # ElasticSearch (Optional - for advanced logging)
  # ---------------------------------------------------------------------------
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: security-dashboard-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - security-network
    security_opt:
      - no-new-privileges:true
    profiles:
      - elk

  # ---------------------------------------------------------------------------
  # Kibana (Optional - for log visualization)
  # ---------------------------------------------------------------------------
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: security-dashboard-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - security-network
    security_opt:
      - no-new-privileges:true
    profiles:
      - elk

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  security-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: security-br0

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  
  mongodb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/mongodb
  
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana
  
  elasticsearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/elasticsearch

# =============================================================================
# SECRETS (for production use)
# =============================================================================
secrets:
  db_password:
    file: ./secrets/db_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  encryption_key:
    file: ./secrets/encryption_key.txt
  session_secret:
    file: ./secrets/session_secret.txt

# =============================================================================
# CONFIGURATION PROFILES
# =============================================================================
# Usage:
# - Development: docker-compose up
# - Production: docker-compose --profile production up
# - With ELK Stack: docker-compose --profile elk up
# - Full Stack: docker-compose --profile production --profile elk up
# =============================================================================