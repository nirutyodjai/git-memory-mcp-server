# =============================================================================
# ENTERPRISE SECURITY DASHBOARD - NGINX CONFIGURATION
# High-Performance Reverse Proxy with Security Hardening
# =============================================================================

# Worker processes configuration
user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Events block
events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

# HTTP block
http {
    # ==========================================================================
    # BASIC CONFIGURATION
    # ==========================================================================
    
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Charset
    charset utf-8;
    
    # Server tokens (security)
    server_tokens off;
    
    # ==========================================================================
    # LOGGING CONFIGURATION
    # ==========================================================================
    
    # Log format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    log_format security '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       '"$http_x_forwarded_for" $request_time '
                       '$upstream_response_time $pipe';
    
    access_log /var/log/nginx/access.log security;
    
    # ==========================================================================
    # PERFORMANCE OPTIMIZATION
    # ==========================================================================
    
    # Sendfile
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    
    # Keepalive
    keepalive_timeout 65;
    keepalive_requests 1000;
    
    # File descriptors
    open_file_cache max=10000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    
    # Buffer sizes
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;
    
    # Timeouts
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;
    
    # ==========================================================================
    # COMPRESSION
    # ==========================================================================
    
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Brotli compression (if module available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # ==========================================================================
    # SECURITY HEADERS
    # ==========================================================================
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' ws: wss:; frame-ancestors 'self';" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    
    # Remove server header
    more_clear_headers Server;
    
    # ==========================================================================
    # RATE LIMITING
    # ==========================================================================
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=100r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # ==========================================================================
    # UPSTREAM CONFIGURATION
    # ==========================================================================
    
    # Security Dashboard upstream
    upstream security_dashboard {
        least_conn;
        server security-dashboard:3000 max_fails=3 fail_timeout=30s;
        # Add more servers for load balancing
        # server security-dashboard-2:3000 max_fails=3 fail_timeout=30s;
        # server security-dashboard-3:3000 max_fails=3 fail_timeout=30s;
        
        keepalive 32;
    }
    
    # WebSocket upstream
    upstream websocket_backend {
        least_conn;
        server security-dashboard:3001 max_fails=3 fail_timeout=30s;
        # Add more servers for load balancing
        # server security-dashboard-2:3001 max_fails=3 fail_timeout=30s;
        # server security-dashboard-3:3001 max_fails=3 fail_timeout=30s;
        
        keepalive 32;
    }
    
    # ==========================================================================
    # SSL CONFIGURATION
    # ==========================================================================
    
    # SSL session cache
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    # SSL protocols and ciphers
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # ==========================================================================
    # MAIN SERVER BLOCK (HTTPS)
    # ==========================================================================
    
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name dashboard.yourdomain.com;
        
        # SSL certificates
        ssl_certificate /etc/nginx/ssl/dashboard.crt;
        ssl_certificate_key /etc/nginx/ssl/dashboard.key;
        ssl_trusted_certificate /etc/nginx/ssl/ca-bundle.crt;
        
        # Root and index
        root /var/www/html;
        index index.html index.htm;
        
        # Security
        limit_conn conn_limit_per_ip 20;
        limit_req zone=general burst=20 nodelay;
        
        # Client max body size
        client_max_body_size 10M;
        
        # =======================================================================
        # LOCATION BLOCKS
        # =======================================================================
        
        # API endpoints
        location /api/ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://security_dashboard;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            proxy_cache_bypass $http_upgrade;
            proxy_redirect off;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }
        
        # Authentication endpoints (stricter rate limiting)
        location ~ ^/api/(auth|login|register) {
            limit_req zone=login burst=5 nodelay;
            
            proxy_pass http://security_dashboard;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Additional security for auth endpoints
            proxy_set_header X-Request-ID $request_id;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # WebSocket connections
        location /ws {
            proxy_pass http://websocket_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific settings
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
            proxy_connect_timeout 60s;
            
            # Disable buffering for WebSocket
            proxy_buffering off;
        }
        
        # Static files
        location /static/ {
            alias /var/www/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            
            # Security for static files
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header X-Content-Type-Options nosniff;
            }
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Nginx status (internal only)
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.20.0.0/16;
            deny all;
        }
        
        # Default location (SPA support)
        location / {
            try_files $uri $uri/ @fallback;
        }
        
        # Fallback for SPA
        location @fallback {
            proxy_pass http://security_dashboard;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Security: Block access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Block common exploit attempts
        location ~* \.(php|asp|aspx|jsp)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
    
    # ==========================================================================
    # HTTP TO HTTPS REDIRECT
    # ==========================================================================
    
    server {
        listen 80;
        listen [::]:80;
        server_name dashboard.yourdomain.com;
        
        # Security headers even for HTTP
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";
        
        # Redirect all HTTP requests to HTTPS
        return 301 https://$server_name$request_uri;
    }
    
    # ==========================================================================
    # DEFAULT SERVER (CATCH-ALL)
    # ==========================================================================
    
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        
        server_name _;
        
        # Default SSL certificate (self-signed)
        ssl_certificate /etc/nginx/ssl/default.crt;
        ssl_certificate_key /etc/nginx/ssl/default.key;
        
        # Return 444 (connection closed without response)
        return 444;
    }
    
    # ==========================================================================
    # MONITORING SERVER (INTERNAL)
    # ==========================================================================
    
    server {
        listen 8080;
        server_name localhost;
        
        access_log off;
        
        # Allow only internal networks
        allow 127.0.0.1;
        allow 172.20.0.0/16;
        allow 10.0.0.0/8;
        deny all;
        
        # Prometheus metrics
        location /metrics {
            stub_status on;
        }
        
        # Health check
        location /health {
            return 200 "OK";
            add_header Content-Type text/plain;
        }
    }
}

# =============================================================================
# STREAM BLOCK (TCP/UDP LOAD BALANCING)
# =============================================================================

stream {
    # Logging
    log_format basic '$remote_addr [$time_local] '
                    '$protocol $status $bytes_sent $bytes_received '
                    '$session_time';
    
    access_log /var/log/nginx/stream.log basic;
    error_log /var/log/nginx/stream_error.log;
    
    # TCP load balancing for database connections (if needed)
    upstream postgres_backend {
        server postgres:5432 max_fails=3 fail_timeout=30s;
    }
    
    upstream redis_backend {
        server redis:6379 max_fails=3 fail_timeout=30s;
    }
    
    # PostgreSQL proxy (internal only)
    server {
        listen 15432;
        proxy_pass postgres_backend;
        proxy_timeout 1s;
        proxy_responses 1;
        
        # Allow only internal networks
        allow 172.20.0.0/16;
        deny all;
    }
    
    # Redis proxy (internal only)
    server {
        listen 16379;
        proxy_pass redis_backend;
        proxy_timeout 1s;
        proxy_responses 1;
        
        # Allow only internal networks
        allow 172.20.0.0/16;
        deny all;
    }
}

# =============================================================================
# END OF CONFIGURATION
# =============================================================================