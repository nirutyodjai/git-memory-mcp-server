{
  "$schema": "https://github.com/modelcontextprotocol/typescript-sdk/blob/main/src/types.ts",
  "mcpServers": {
    "playwright": {
      "name": "Playwright",
      "description": "Browser automation and web testing with Playwright integration for Trae AI",
      "endpoint": "/api/mcp/playwright",
      "version": "1.0.0",
      "capabilities": [
        "get_context",
        "get_full_dom",
        "get_screenshot",
        "execute_code",
        "init_browser",
        "validate_selectors",
        "navigate_to_url",
        "click_element",
        "fill_input",
        "wait_for_element",
        "extract_text",
        "generate_test_code",
        "run_test"
      ],
      "rateLimit": {
        "requests": 30,
        "window": "15m"
      },
      "config": {
        "browserType": "chromium",
        "headless": false,
        "timeout": 30000,
        "viewport": {
          "width": 1280,
          "height": 720
        },
        "enableScreenshots": true,
        "enableTracing": true,
        "enableVideo": false
      }
    },
    "multi-fetch": {
      "name": "Multi Fetch",
      "description": "Fetch websites and return content in various formats (HTML, JSON, text, markdown)",
      "endpoint": "/api/mcp/fetch",
      "version": "1.0.0",
      "capabilities": [
        "fetch_html",
        "fetch_json",
        "fetch_txt",
        "fetch_markdown",
        "fetch_plaintext"
      ],
      "rateLimit": {
        "requests": 100,
        "window": "15m"
      },
      "config": {
        "maxContentSize": 52428800,
        "defaultTimeout": 30000,
        "maxRedirects": 10,
        "enableContentSplitting": true,
        "supportedFormats": ["html", "json", "text", "markdown", "plaintext"]
      }
    },
    "blender": {
      "name": "Blender",
      "description": "Integration with Blender 3D software and external asset libraries",
      "endpoint": "/api/mcp/blender",
      "version": "1.0.0",
      "capabilities": [
        "get_scene_info",
        "get_object_info",
        "get_viewport_screenshot",
        "execute_blender_code",
        "get_polyhaven_categories",
        "search_polyhaven_assets",
        "download_polyhaven_asset",
        "set_texture",
        "search_sketchfab_models",
        "download_sketchfab_model",
        "generate_hyper3d_model_via_text"
      ],
      "rateLimit": {
        "requests": 50,
        "window": "15m"
      },
      "config": {
        "blenderPath": null,
        "autoConnect": false,
        "supportedAssetTypes": ["hdris", "textures", "models"],
        "supportedResolutions": ["1k", "2k", "4k", "8k"],
        "supportedFormats": {
          "hdris": ["hdr", "exr"],
          "textures": ["jpg", "png", "exr"],
          "models": ["gltf", "fbx", "obj"]
        }
      }
    },
    "sequential-thinking": {
      "name": "Sequential Thinking",
      "description": "Structured thinking and problem-solving processes",
      "endpoint": "/api/mcp/thinking",
      "version": "1.0.0",
      "capabilities": [
        "get_templates",
        "add_template",
        "create_process",
        "get_process",
        "delete_process",
        "start_process",
        "start_step",
        "complete_step",
        "fail_step",
        "get_progress",
        "export_process",
        "import_process"
      ],
      "rateLimit": {
        "requests": 200,
        "window": "15m"
      },
      "config": {
        "maxProcesses": 100,
        "maxStepsPerProcess": 50,
        "autoSave": true,
        "defaultTemplates": [
          "problem-solving",
          "design-thinking",
          "software-development",
          "research",
          "decision-making"
        ]
      }
    },
    "shadcn-ui": {
      "name": "Shadcn UI",
      "description": "Access to shadcn/ui v4 components, blocks, demos, and metadata for React, Svelte, and Vue",
      "endpoint": "/api/mcp/shadcn-ui",
      "version": "1.1.0",
      "capabilities": [
        "get_component",
        "get_component_source",
        "get_component_demo",
        "get_block",
        "get_block_source",
        "list_components",
        "list_blocks",
        "get_metadata",
        "browse_directory",
        "search_components"
      ],
      "rateLimit": {
        "requests": 100,
        "window": "15m"
      },
      "config": {
        "framework": "react",
        "repository": "shadcn-ui/ui",
        "fileExtension": ".tsx",
        "enableCaching": true,
        "githubApiKey": "auto-detected"
      }
    },
    "magic-ui": {
      "name": "Magic UI",
      "description": "Official Magic UI MCP server for accessing Magic UI components and animations",
      "endpoint": "/api/mcp/magic-ui",
      "version": "1.0.6",
      "capabilities": [
        "getUIComponents",
        "getLayout",
        "getMedia",
        "getMotion",
        "getTextReveal",
        "getTextEffects",
        "getButtons",
        "getEffects",
        "getWidgets",
        "getBackgrounds",
        "getDevices"
      ],
      "rateLimit": {
        "requests": 100,
        "window": "15m"
      },
      "config": {
        "command": "npx",
        "args": ["-y", "@magicuidesign/mcp@latest"],
        "enableCaching": true
      }
    },
    "google-workspace": {
      "name": "Google Workspace",
      "description": "Complete Google Workspace integration with Gmail, Calendar, Drive, Docs, Sheets, Slides, Forms, Tasks, and Chat",
      "endpoint": "/api/mcp/google-workspace",
      "version": "1.0.0",
      "capabilities": [
        "gmail_list_messages",
        "gmail_send_message",
        "gmail_get_message",
        "gmail_delete_message",
        "calendar_list_events",
        "calendar_create_event",
        "calendar_update_event",
        "calendar_delete_event",
        "drive_list_files",
        "drive_upload_file",
        "drive_download_file",
        "drive_delete_file",
        "docs_create_document",
        "docs_get_document",
        "docs_update_document",
        "sheets_create_spreadsheet",
        "sheets_get_values",
        "sheets_update_values",
        "slides_create_presentation",
        "slides_get_presentation",
        "forms_create_form",
        "forms_get_form",
        "tasks_list_tasks",
        "tasks_create_task",
        "chat_send_message",
        "search_custom"
      ],
      "rateLimit": {
        "requests": 100,
        "window": "15m"
      },
      "config": {
        "command": "uvx",
        "args": ["workspace-mcp", "--tool-tier", "core"],
        "enableCaching": true,
        "authType": "oauth2",
        "scopes": [
          "https://www.googleapis.com/auth/gmail.modify",
          "https://www.googleapis.com/auth/calendar",
          "https://www.googleapis.com/auth/drive",
          "https://www.googleapis.com/auth/documents",
          "https://www.googleapis.com/auth/spreadsheets",
          "https://www.googleapis.com/auth/presentations",
          "https://www.googleapis.com/auth/forms",
          "https://www.googleapis.com/auth/tasks",
          "https://www.googleapis.com/auth/chat.messages"
        ]
      }
    },
    "memory": {
      "name": "Memory",
      "description": "Memory management and data storage with advanced querying",
      "endpoint": "/api/mcp/memory",
      "version": "1.0.0",
      "capabilities": [
        "set",
        "get",
        "delete",
        "query",
        "search",
        "bulk_set",
        "bulk_get",
        "bulk_delete",
        "stats",
        "backup",
        "restore",
        "configure",
        "clear",
        "expire"
      ],
      "rateLimit": {
        "requests": 500,
        "window": "15m"
      },
      "config": {
        "maxSize": 104857600,
        "defaultTTL": 3600000,
        "enableCompression": true,
        "enableEncryption": false,
        "autoCleanup": true,
        "cleanupInterval": 300000,
        "supportedTypes": ["string", "number", "boolean", "object", "array"]
      }
    },
    "database": {
      "name": "Database",
      "description": "Multi-database integration with PostgreSQL, MySQL, MongoDB, and Redis support",
      "endpoint": "/api/mcp/database",
      "version": "1.0.0",
      "capabilities": [
        "execute_query",
        "get_schema",
        "list_tables",
        "describe_table",
        "create_table",
        "drop_table",
        "insert_data",
        "update_data",
        "delete_data",
        "backup_database",
        "restore_database",
        "optimize_query",
        "get_performance_stats",
        "manage_indexes"
      ],
      "rateLimit": {
        "requests": 200,
        "window": "15m"
      },
      "config": {
        "supportedDatabases": ["postgresql", "mysql", "mongodb", "redis", "sqlite"],
        "maxConnections": 10,
        "connectionTimeout": 30000,
        "queryTimeout": 60000,
        "enableQueryLogging": true,
        "enablePerformanceMonitoring": true
      }
    },
    "ai-ml": {
      "name": "AI/ML",
      "description": "AI and Machine Learning services integration with OpenAI, Anthropic, Hugging Face, and local models",
      "endpoint": "/api/mcp/ai-ml",
      "version": "1.0.0",
      "capabilities": [
        "generate_text",
        "generate_image",
        "analyze_image",
        "transcribe_audio",
        "translate_text",
        "summarize_text",
        "classify_text",
        "extract_entities",
        "sentiment_analysis",
        "generate_embeddings",
        "similarity_search",
        "fine_tune_model",
        "deploy_model",
        "model_inference"
      ],
      "rateLimit": {
        "requests": 100,
        "window": "15m"
      },
      "config": {
        "providers": ["openai", "anthropic", "huggingface", "local"],
        "defaultProvider": "openai",
        "maxTokens": 4096,
        "temperature": 0.7,
        "enableCaching": true,
        "enableBatching": true,
        "supportedModels": {
          "text": ["gpt-4", "claude-3", "llama-2"],
          "image": ["dall-e-3", "midjourney", "stable-diffusion"],
          "audio": ["whisper", "elevenlabs"]
        }
      }
    },
    "git": {
      "name": "Git",
      "description": "Git version control system integration with GitHub, GitLab, and Bitbucket support",
      "endpoint": "/api/mcp/git",
      "version": "1.0.0",
      "capabilities": [
        "clone_repository",
        "create_branch",
        "switch_branch",
        "merge_branch",
        "commit_changes",
        "push_changes",
        "pull_changes",
        "create_pull_request",
        "review_pull_request",
        "get_commit_history",
        "get_diff",
        "tag_release",
        "manage_issues",
        "run_ci_cd"
      ],
      "rateLimit": {
        "requests": 150,
        "window": "15m"
      },
      "config": {
        "supportedProviders": ["github", "gitlab", "bitbucket", "local"],
        "defaultProvider": "github",
        "enableWebhooks": true,
        "enableCICD": true,
        "maxFileSize": 104857600,
        "supportedFormats": ["git", "zip", "tar"]
      }
    },
    "docker": {
      "name": "Docker",
      "description": "Docker containerization and orchestration with Kubernetes support",
      "endpoint": "/api/mcp/docker",
      "version": "1.0.0",
      "capabilities": [
        "list_containers",
        "create_container",
        "start_container",
        "stop_container",
        "remove_container",
        "build_image",
        "push_image",
        "pull_image",
        "list_images",
        "remove_image",
        "create_network",
        "manage_volumes",
        "deploy_stack",
        "scale_service"
      ],
      "rateLimit": {
        "requests": 100,
        "window": "15m"
      },
      "config": {
        "dockerHost": "unix:///var/run/docker.sock",
        "enableKubernetes": true,
        "enableSwarm": false,
        "maxContainers": 50,
        "defaultRegistry": "docker.io",
        "enableLogging": true,
        "enableMonitoring": true
      }
    },
    "slack": {
      "name": "Slack",
      "description": "Slack communication and collaboration platform integration",
      "endpoint": "/api/mcp/slack",
      "version": "1.0.0",
      "capabilities": [
        "send_message",
        "send_file",
        "create_channel",
        "invite_users",
        "get_messages",
        "search_messages",
        "set_status",
        "schedule_message",
        "create_reminder",
        "manage_workflows",
        "get_user_info",
        "get_channel_info",
        "create_poll",
        "manage_apps"
      ],
      "rateLimit": {
        "requests": 100,
        "window": "15m"
      },
      "config": {
        "botToken": "auto-detected",
        "userToken": "auto-detected",
        "enableRTM": true,
        "enableEvents": true,
        "maxFileSize": 1073741824,
        "supportedFileTypes": ["image", "document", "video", "audio"]
      }
    },
    "notion": {
      "name": "Notion",
      "description": "Notion workspace and knowledge management integration",
      "endpoint": "/api/mcp/notion",
      "version": "1.0.0",
      "capabilities": [
        "create_page",
        "update_page",
        "delete_page",
        "get_page",
        "search_pages",
        "create_database",
        "query_database",
        "update_database",
        "create_block",
        "update_block",
        "delete_block",
        "upload_file",
        "manage_users",
        "sync_workspace"
      ],
      "rateLimit": {
        "requests": 100,
        "window": "15m"
      },
      "config": {
        "apiToken": "auto-detected",
        "enableRealTimeSync": true,
        "maxPageSize": 100,
        "enableVersioning": true,
        "supportedBlockTypes": ["paragraph", "heading", "list", "table", "image", "code"]
      }
    },
    "redis": {
      "name": "Redis",
      "description": "Redis in-memory data structure store for caching and real-time applications",
      "endpoint": "/api/mcp/redis",
      "version": "1.0.0",
      "capabilities": [
        "set_key",
        "get_key",
        "delete_key",
        "exists_key",
        "expire_key",
        "list_keys",
        "flush_database",
        "get_info",
        "monitor_performance",
        "manage_streams",
        "pub_sub",
        "lua_script",
        "backup_restore",
        "cluster_management"
      ],
      "rateLimit": {
        "requests": 500,
        "window": "15m"
      },
      "config": {
        "host": "localhost",
        "port": 6379,
        "password": "auto-detected",
        "database": 0,
        "enableCluster": false,
        "enableSentinel": false,
        "maxConnections": 10,
        "connectionTimeout": 5000
      }
    },
    "elasticsearch": {
      "name": "Elasticsearch",
      "description": "Elasticsearch search and analytics engine integration",
      "endpoint": "/api/mcp/elasticsearch",
      "version": "1.0.0",
      "capabilities": [
        "create_index",
        "delete_index",
        "index_document",
        "search_documents",
        "update_document",
        "delete_document",
        "bulk_operations",
        "aggregations",
        "mapping_management",
        "cluster_health",
        "performance_monitoring",
        "snapshot_restore",
        "template_management",
        "alias_management"
      ],
      "rateLimit": {
        "requests": 200,
        "window": "15m"
      },
      "config": {
        "host": "localhost",
        "port": 9200,
        "enableSecurity": true,
        "enableSSL": false,
        "maxResultSize": 10000,
        "defaultTimeout": 30000,
        "enableLogging": true
       }
     },
     "graphql": {
       "name": "GraphQL",
       "description": "GraphQL API development and management with schema introspection",
       "endpoint": "/api/mcp/graphql",
       "version": "1.0.0",
       "capabilities": [
         "execute_query",
         "execute_mutation",
         "execute_subscription",
         "introspect_schema",
         "validate_query",
         "generate_schema",
         "create_resolver",
         "manage_types",
         "performance_analysis",
         "cache_management",
         "federation_support",
         "playground_access",
         "schema_stitching",
         "directive_management"
       ],
       "rateLimit": {
         "requests": 200,
         "window": "15m"
       },
       "config": {
         "enablePlayground": true,
         "enableIntrospection": true,
         "maxQueryDepth": 10,
         "maxQueryComplexity": 1000,
         "enableCaching": true,
         "enableTracing": true,
         "supportedExtensions": ["apollo", "relay", "federation"]
       }
     },
     "websocket": {
       "name": "WebSocket",
       "description": "Real-time WebSocket communication and event streaming",
       "endpoint": "/api/mcp/websocket",
       "version": "1.0.0",
       "capabilities": [
         "create_connection",
         "close_connection",
         "send_message",
         "broadcast_message",
         "join_room",
         "leave_room",
         "manage_subscriptions",
         "handle_events",
         "connection_monitoring",
         "rate_limiting",
         "authentication",
         "message_queuing",
         "heartbeat_monitoring",
         "load_balancing"
       ],
       "rateLimit": {
         "requests": 1000,
         "window": "15m"
       },
       "config": {
         "maxConnections": 10000,
         "heartbeatInterval": 30000,
         "connectionTimeout": 60000,
         "enableCompression": true,
         "enableAuthentication": true,
         "maxMessageSize": 1048576,
         "supportedProtocols": ["ws", "wss", "socket.io"]
       }
     },
     "monitoring": {
       "name": "Monitoring",
       "description": "Application performance monitoring and observability with Prometheus, Grafana integration",
       "endpoint": "/api/mcp/monitoring",
       "version": "1.0.0",
       "capabilities": [
         "collect_metrics",
         "create_dashboard",
         "set_alerts",
         "log_analysis",
         "trace_requests",
         "monitor_health",
         "performance_profiling",
         "error_tracking",
         "uptime_monitoring",
         "resource_monitoring",
         "custom_metrics",
         "anomaly_detection",
         "report_generation",
         "notification_management"
       ],
       "rateLimit": {
         "requests": 500,
         "window": "15m"
       },
       "config": {
         "enablePrometheus": true,
         "enableGrafana": true,
         "enableJaeger": true,
         "retentionPeriod": "30d",
         "samplingRate": 0.1,
         "enableAlerting": true,
         "supportedIntegrations": ["prometheus", "grafana", "jaeger", "elk", "datadog"]
       }
     },
     "aws": {
       "name": "AWS",
       "description": "Amazon Web Services cloud platform integration",
       "endpoint": "/api/mcp/aws",
       "version": "1.0.0",
       "capabilities": [
         "manage_ec2",
         "manage_s3",
         "manage_lambda",
         "manage_rds",
         "manage_dynamodb",
         "manage_cloudformation",
         "manage_iam",
         "manage_vpc",
         "manage_cloudwatch",
         "manage_apigateway",
         "manage_ecs",
         "manage_eks",
         "cost_optimization",
         "security_audit"
       ],
       "rateLimit": {
         "requests": 100,
         "window": "15m"
       },
       "config": {
         "region": "us-east-1",
         "enableCostMonitoring": true,
         "enableSecurityAudit": true,
         "enableAutoScaling": true,
         "supportedServices": ["ec2", "s3", "lambda", "rds", "dynamodb", "cloudformation"]
       }
     },
     "azure": {
       "name": "Azure",
       "description": "Microsoft Azure cloud platform integration",
       "endpoint": "/api/mcp/azure",
       "version": "1.0.0",
       "capabilities": [
         "manage_vms",
         "manage_storage",
         "manage_functions",
         "manage_sql",
         "manage_cosmosdb",
         "manage_arm_templates",
         "manage_active_directory",
         "manage_virtual_networks",
         "manage_monitor",
         "manage_api_management",
         "manage_container_instances",
         "manage_kubernetes",
         "cost_management",
         "security_center"
       ],
       "rateLimit": {
         "requests": 100,
         "window": "15m"
       },
       "config": {
         "subscriptionId": "auto-detected",
         "enableCostManagement": true,
         "enableSecurityCenter": true,
         "enableAutoScaling": true,
         "supportedServices": ["compute", "storage", "functions", "sql", "cosmosdb"]
       }
     },
     "gcp": {
       "name": "Google Cloud Platform",
       "description": "Google Cloud Platform services integration",
       "endpoint": "/api/mcp/gcp",
       "version": "1.0.0",
       "capabilities": [
         "manage_compute_engine",
         "manage_cloud_storage",
         "manage_cloud_functions",
         "manage_cloud_sql",
         "manage_firestore",
         "manage_deployment_manager",
         "manage_iam",
         "manage_vpc",
         "manage_monitoring",
         "manage_api_gateway",
         "manage_gke",
         "manage_cloud_run",
         "billing_management",
         "security_command_center"
       ],
       "rateLimit": {
         "requests": 100,
         "window": "15m"
       },
       "config": {
         "projectId": "auto-detected",
         "enableBillingAlerts": true,
         "enableSecurityCenter": true,
         "enableAutoScaling": true,
         "supportedServices": ["compute", "storage", "functions", "sql", "firestore"]
       }
     },
     "kubernetes": {
       "name": "Kubernetes",
       "description": "Kubernetes container orchestration platform management",
       "endpoint": "/api/mcp/kubernetes",
       "version": "1.0.0",
       "capabilities": [
         "manage_pods",
         "manage_deployments",
         "manage_services",
         "manage_ingress",
         "manage_configmaps",
         "manage_secrets",
         "manage_namespaces",
         "manage_rbac",
         "manage_persistent_volumes",
         "manage_helm_charts",
         "cluster_monitoring",
         "log_aggregation",
         "auto_scaling",
         "security_policies"
       ],
       "rateLimit": {
         "requests": 200,
         "window": "15m"
       },
       "config": {
         "kubeconfig": "auto-detected",
         "enableHelm": true,
         "enableIstio": false,
         "enablePrometheus": true,
         "enableGrafana": true,
         "maxPods": 1000,
         "supportedVersions": ["1.25", "1.26", "1.27", "1.28"]
       }
     },
     "terraform": {
       "name": "Terraform",
       "description": "Infrastructure as Code with Terraform for multi-cloud deployment",
       "endpoint": "/api/mcp/terraform",
       "version": "1.0.0",
       "capabilities": [
         "plan_infrastructure",
         "apply_infrastructure",
         "destroy_infrastructure",
         "validate_configuration",
         "format_code",
         "import_resources",
         "manage_state",
         "manage_workspaces",
         "generate_modules",
         "cost_estimation",
         "security_scanning",
         "compliance_checking",
         "drift_detection",
         "policy_validation"
       ],
       "rateLimit": {
         "requests": 50,
         "window": "15m"
       },
       "config": {
         "enableCloudProviders": ["aws", "azure", "gcp", "digitalocean"],
         "enableStateBackend": true,
         "enableRemoteExecution": false,
         "enableCostEstimation": true,
         "enableSecurityScanning": true,
         "supportedVersions": ["1.5", "1.6", "1.7"]
        }
      },
      "blockchain": {
        "name": "Blockchain",
        "description": "Blockchain and Web3 integration with Ethereum, Polygon, and other networks",
        "endpoint": "/api/mcp/blockchain",
        "version": "1.0.0",
        "capabilities": [
          "deploy_smart_contract",
          "interact_with_contract",
          "send_transaction",
          "query_blockchain",
          "manage_wallet",
          "create_nft",
          "manage_tokens",
          "defi_operations",
          "cross_chain_bridge",
          "gas_optimization",
          "security_audit",
          "event_monitoring",
          "ipfs_integration",
          "dao_governance"
        ],
        "rateLimit": {
          "requests": 100,
          "window": "15m"
        },
        "config": {
          "supportedNetworks": ["ethereum", "polygon", "bsc", "avalanche", "arbitrum"],
          "defaultNetwork": "ethereum",
          "enableTestnet": true,
          "gasOptimization": true,
          "enableIPFS": true,
          "walletIntegration": ["metamask", "walletconnect", "coinbase"]
        }
      },
      "iot": {
        "name": "IoT",
        "description": "Internet of Things device management and data processing",
        "endpoint": "/api/mcp/iot",
        "version": "1.0.0",
        "capabilities": [
          "device_registration",
          "device_monitoring",
          "data_collection",
          "remote_control",
          "firmware_update",
          "sensor_calibration",
          "alert_management",
          "data_analytics",
          "predictive_maintenance",
          "energy_optimization",
          "security_management",
          "protocol_translation",
          "edge_computing",
          "fleet_management"
        ],
        "rateLimit": {
          "requests": 1000,
          "window": "15m"
        },
        "config": {
          "supportedProtocols": ["mqtt", "coap", "http", "websocket", "lorawan"],
          "maxDevices": 10000,
          "dataRetention": "1y",
          "enableEdgeComputing": true,
          "enablePredictiveAnalytics": true,
          "securityLevel": "high"
        }
      },
      "edge-computing": {
        "name": "Edge Computing",
        "description": "Edge computing platform for distributed processing and low-latency applications",
        "endpoint": "/api/mcp/edge-computing",
        "version": "1.0.0",
        "capabilities": [
          "deploy_edge_function",
          "manage_edge_nodes",
          "data_synchronization",
          "load_balancing",
          "content_delivery",
          "real_time_processing",
          "offline_capability",
          "bandwidth_optimization",
          "latency_monitoring",
          "failover_management",
          "security_enforcement",
          "resource_allocation",
          "performance_optimization",
          "distributed_caching"
        ],
        "rateLimit": {
          "requests": 500,
          "window": "15m"
        },
        "config": {
          "maxEdgeNodes": 1000,
          "syncInterval": 30000,
          "enableOfflineMode": true,
          "compressionLevel": "high",
          "enableCDN": true,
          "supportedRegions": ["us-east", "us-west", "eu-central", "asia-pacific"]
        }
      },
      "security": {
        "name": "Security",
        "description": "Comprehensive security tools for vulnerability scanning, penetration testing, and compliance",
        "endpoint": "/api/mcp/security",
        "version": "1.0.0",
        "capabilities": [
          "vulnerability_scan",
          "penetration_test",
          "security_audit",
          "compliance_check",
          "threat_detection",
          "incident_response",
          "access_control",
          "encryption_management",
          "certificate_management",
          "firewall_management",
          "intrusion_detection",
          "malware_analysis",
          "security_reporting",
          "risk_assessment"
        ],
        "rateLimit": {
          "requests": 100,
          "window": "15m"
        },
        "config": {
          "enableRealTimeScanning": true,
          "complianceStandards": ["iso27001", "gdpr", "hipaa", "pci-dss"],
          "threatIntelligence": true,
          "automatedResponse": false,
          "encryptionLevel": "aes-256",
          "auditLogging": true
        }
      },
      "analytics": {
        "name": "Analytics",
        "description": "Advanced analytics and business intelligence with machine learning insights",
        "endpoint": "/api/mcp/analytics",
        "version": "1.0.0",
        "capabilities": [
          "data_visualization",
          "statistical_analysis",
          "predictive_modeling",
          "anomaly_detection",
          "trend_analysis",
          "cohort_analysis",
          "funnel_analysis",
          "a_b_testing",
          "real_time_analytics",
          "custom_dashboards",
          "automated_insights",
          "data_mining",
          "report_generation",
          "kpi_monitoring"
        ],
        "rateLimit": {
          "requests": 300,
          "window": "15m"
        },
        "config": {
          "enableRealTime": true,
          "dataRetention": "2y",
          "enableMLInsights": true,
          "supportedCharts": ["line", "bar", "pie", "scatter", "heatmap", "funnel"],
          "enableExport": true,
          "maxDataPoints": 1000000
        }
      },
      "messaging": {
        "name": "Messaging",
        "description": "Multi-platform messaging integration with SMS, Email, Push notifications, and chat platforms",
        "endpoint": "/api/mcp/messaging",
        "version": "1.0.0",
        "capabilities": [
          "send_sms",
          "send_email",
          "send_push_notification",
          "send_chat_message",
          "create_campaign",
          "manage_templates",
          "track_delivery",
          "manage_contacts",
          "automation_workflows",
          "a_b_test_messages",
          "analytics_reporting",
          "compliance_management",
          "multi_language_support",
          "personalization"
        ],
        "rateLimit": {
          "requests": 1000,
          "window": "15m"
        },
        "config": {
          "supportedChannels": ["sms", "email", "push", "whatsapp", "telegram", "discord"],
          "enableDeliveryTracking": true,
          "enablePersonalization": true,
          "maxRecipientsPerBatch": 10000,
          "enableScheduling": true,
          "complianceMode": "gdpr"
        }
      },
      "payment": {
        "name": "Payment",
        "description": "Payment processing integration with multiple payment gateways and cryptocurrency support",
        "endpoint": "/api/mcp/payment",
        "version": "1.0.0",
        "capabilities": [
          "process_payment",
          "refund_payment",
          "create_subscription",
          "manage_customers",
          "handle_webhooks",
          "fraud_detection",
          "currency_conversion",
          "payment_analytics",
          "compliance_reporting",
          "dispute_management",
          "crypto_payments",
          "recurring_billing",
          "invoice_generation",
          "tax_calculation"
        ],
        "rateLimit": {
          "requests": 500,
          "window": "15m"
        },
        "config": {
          "supportedGateways": ["stripe", "paypal", "square", "adyen", "braintree"],
          "enableCrypto": true,
          "supportedCurrencies": ["USD", "EUR", "GBP", "JPY", "BTC", "ETH"],
          "enableFraudDetection": true,
          "pciCompliance": true,
          "enable3DSecure": true
        }
      }
    },
  "global": {
    "baseUrl": "http://localhost:3000",
    "timeout": 30000,
    "retries": 3,
    "retryDelay": 1000,
    "userAgent": "MCP-Client/1.0.0",
    "headers": {
      "Content-Type": "application/json",
      "Accept": "application/json"
    },
    "security": {
      "enableRateLimit": true,
      "enableCORS": true,
      "allowedOrigins": ["http://localhost:3000", "https://localhost:3000"],
      "enableCSRF": false
    },
    "logging": {
      "level": "info",
      "enableRequestLogging": true,
      "enableErrorLogging": true,
      "logFormat": "json"
    },
    "monitoring": {
      "enableMetrics": true,
      "enableHealthCheck": true,
      "healthCheckInterval": 60000
    }
  },
  "environments": {
    "development": {
      "baseUrl": "http://localhost:3000",
      "logging": {
        "level": "debug"
      },
      "security": {
        "enableRateLimit": false
      }
    },
    "production": {
      "baseUrl": "https://your-domain.com",
      "logging": {
        "level": "warn"
      },
      "security": {
        "enableRateLimit": true,
        "enableCSRF": true
      }
    }
  },
  "metadata": {
    "version": "3.0.0",
    "created": "2024-01-15T00:00:00.000Z",
    "updated": "2024-01-25T16:20:00.000Z",
    "author": "Next-Gen AI Platform Team",
    "description": "Comprehensive next-generation MCP configuration with enterprise-grade integrations including AI/ML, cloud platforms, blockchain, IoT, and advanced productivity tools",
    "license": "MIT",
    "repository": "https://github.com/your-org/3d-sco",
    "documentation": "https://docs.your-domain.com/mcp",
    "tags": ["mcp", "integration", "ai", "automation", "productivity", "enterprise", "cloud-native", "blockchain", "iot", "security"],
    "compatibility": {
      "mcpVersion": ">=2.0.0",
      "nodeVersion": ">=20.0.0",
      "platforms": ["windows", "macos", "linux", "docker", "kubernetes"]
    },
    "features": [
      "Multi-platform integration",
      "Advanced AI/ML capabilities",
      "Real-time collaboration",
      "Cloud workspace management",
      "Enhanced productivity tools",
      "Sequential thinking support",
      "UI component generation",
      "Memory management",
      "Database integration (PostgreSQL, MySQL, MongoDB, Redis)",
      "Git version control with GitHub/GitLab/Bitbucket",
      "Docker containerization and Kubernetes orchestration",
      "Multi-cloud support (AWS, Azure, GCP)",
      "Infrastructure as Code with Terraform",
      "GraphQL API development",
      "Real-time WebSocket communication",
      "Comprehensive monitoring and observability",
      "Blockchain and Web3 integration",
      "IoT device management",
      "Edge computing capabilities",
      "Enterprise security tools",
      "Advanced analytics and BI",
      "Multi-channel messaging",
      "Payment processing with crypto support",
      "Slack and Notion integration",
      "Elasticsearch search and analytics"
    ],
    "serverCount": 22,
    "totalCapabilities": 312,
    "enterpriseReady": true,
    "cloudNative": true,
    "securityCompliant": true
  }
}