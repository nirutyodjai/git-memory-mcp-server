/**
 * NEXUS IDE - Universal Data Client
 * Client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Universal Data Hub
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á MCP Servers ‡∏ó‡∏±‡πâ‡∏á 3000 ‡∏ï‡∏±‡∏ß
 */

const WebSocket = require('ws');
const readline = require('readline');

class UniversalDataClient {
    constructor(serverUrl = 'ws://localhost:9001') {
        this.serverUrl = serverUrl;
        this.ws = null;
        this.isConnected = false;
        this.connectionId = null;
        this.messageHandlers = new Map();
        
        this.setupMessageHandlers();
    }

    setupMessageHandlers() {
        this.messageHandlers.set('welcome', (data) => {
            this.connectionId = data.connectionId;
            console.log(`üéâ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! Connection ID: ${this.connectionId}`);
            console.log(`üìä MCP Servers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${data.totalServers} ‡∏ï‡∏±‡∏ß`);
            console.log(`üíæ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${data.dataEntries} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        });
        
        this.messageHandlers.set('data_response', (data) => {
            console.log(`\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö key: ${data.key}`);
            if (data.result) {
                console.log(`üìÑ Value: ${JSON.stringify(data.result.value, null, 2)}`);
                console.log(`üñ•Ô∏è  Server ID: ${data.result.serverId || 'N/A'}`);
                console.log(`‚è∞ Timestamp: ${data.result.timestamp}`);
                console.log(`üîÑ Synced Servers: ${data.result.syncedServers.length} ‡∏ï‡∏±‡∏ß`);
            } else {
                console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
            }
        });
        
        this.messageHandlers.set('data_updated', (data) => {
            console.log(`\nüîî ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ${data.key}`);
            console.log(`üìÑ Value: ${JSON.stringify(data.value).substring(0, 100)}...`);
            console.log(`üñ•Ô∏è  Server: ${data.serverId || 'Central'}`);
        });
        
        this.messageHandlers.set('sync_completed', (data) => {
            console.log(`\n‚úÖ ‡∏Å‡∏≤‡∏£ Sync ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!`);
            console.log(`‚è±Ô∏è  ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤: ${data.duration.toFixed(2)}ms`);
            console.log(`üñ•Ô∏è  Servers: ${data.totalServers} ‡∏ï‡∏±‡∏ß`);
            console.log(`üíæ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${data.dataEntries} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        });
        
        this.messageHandlers.set('stats_response', (data) => {
            console.log('\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Universal Data Hub:');
            console.log(`üñ•Ô∏è  Total Servers: ${data.totalServers}`);
            console.log(`üîó Active Connections: ${data.activeConnections}`);
            console.log(`üíæ Data Entries: ${data.dataEntries}`);
            console.log(`üîÑ Sync Operations: ${data.syncOperations}`);
            console.log(`‚è∞ Last Sync: ${data.lastSync || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢'}`);
            console.log(`üìà Uptime: ${Math.floor(data.uptime)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
            console.log('\nüìã Servers by Type:');
            console.log(`   ü§ñ AI/ML: ${data.serversByType['AI/ML']} ‡∏ï‡∏±‡∏ß`);
            console.log(`   üè¢ Enterprise: ${data.serversByType['Enterprise']} ‡∏ï‡∏±‡∏ß`);
            console.log(`   ‚ö° Specialized: ${data.serversByType['Specialized']} ‡∏ï‡∏±‡∏ß`);
            console.log(`\n‚è≥ Queue Size: ${data.queueSize}`);
            console.log(`üîÑ Processing: ${data.isProcessing ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'}`);
        });
    }

    async connect() {
        return new Promise((resolve, reject) => {
            console.log(`üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${this.serverUrl}...`);
            
            this.ws = new WebSocket(this.serverUrl);
            
            this.ws.on('open', () => {
                this.isConnected = true;
                console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
                resolve();
            });
            
            this.ws.on('message', (data) => {
                try {
                    const message = JSON.parse(data);
                    this.handleMessage(message);
                } catch (error) {
                    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:', error);
                }
            });
            
            this.ws.on('close', () => {
                this.isConnected = false;
                console.log('üîå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏¥‡∏î');
            });
            
            this.ws.on('error', (error) => {
                console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:', error);
                reject(error);
            });
        });
    }

    handleMessage(message) {
        const { type, data } = message;
        const handler = this.messageHandlers.get(type);
        
        if (handler) {
            handler(data);
        } else {
            console.log(`üì® ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å: ${type}`, data);
        }
    }

    sendMessage(type, data) {
        if (!this.isConnected) {
            console.error('‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå');
            return;
        }
        
        const message = { type, data };
        this.ws.send(JSON.stringify(message));
    }

    // API Methods
    setData(key, value, serverId = null) {
        console.log(`üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${key}`);
        this.sendMessage('set_data', { key, value, serverId });
    }

    getData(key) {
        console.log(`üìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${key}`);
        this.sendMessage('get_data', { key });
    }

    syncAll() {
        console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠ sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...');
        this.sendMessage('sync_request', {});
    }

    getStats() {
        console.log('üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥...');
        this.sendMessage('get_stats', {});
    }

    disconnect() {
        if (this.ws) {
            this.ws.close();
        }
    }
}

// CLI Interface
class UniversalDataCLI {
    constructor() {
        this.client = new UniversalDataClient();
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
    }

    async start() {
        console.log('üåê NEXUS IDE - Universal Data Client');
        console.log('üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Universal Data Hub\n');
        
        try {
            await this.client.connect();
            this.showHelp();
            this.startCLI();
        } catch (error) {
            console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ:', error.message);
            process.exit(1);
        }
    }

    showHelp() {
        console.log('\nüìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:');
        console.log('  set <key> <value> [serverId]  - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
        console.log('  get <key>                     - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
        console.log('  sync                          - sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
        console.log('  stats                         - ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥');
        console.log('  help                          - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠');
        console.log('  exit                          - ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°');
        console.log('');
    }

    startCLI() {
        this.rl.prompt();
        
        this.rl.on('line', (input) => {
            const args = input.trim().split(' ');
            const command = args[0].toLowerCase();
            
            switch (command) {
                case 'set':
                    if (args.length >= 3) {
                        const key = args[1];
                        const value = args.slice(2, args.length - (args.length > 3 && args[args.length - 1].startsWith('ai-') || args[args.length - 1].startsWith('enterprise-') || args[args.length - 1].startsWith('specialized-') ? 1 : 0)).join(' ');
                        const serverId = args.length > 3 && (args[args.length - 1].startsWith('ai-') || args[args.length - 1].startsWith('enterprise-') || args[args.length - 1].startsWith('specialized-')) ? args[args.length - 1] : null;
                        
                        try {
                            const parsedValue = JSON.parse(value);
                            this.client.setData(key, parsedValue, serverId);
                        } catch {
                            this.client.setData(key, value, serverId);
                        }
                    } else {
                        console.log('‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: set <key> <value> [serverId]');
                    }
                    break;
                    
                case 'get':
                    if (args.length >= 2) {
                        this.client.getData(args[1]);
                    } else {
                        console.log('‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: get <key>');
                    }
                    break;
                    
                case 'sync':
                    this.client.syncAll();
                    break;
                    
                case 'stats':
                    this.client.getStats();
                    break;
                    
                case 'help':
                    this.showHelp();
                    break;
                    
                case 'exit':
                    console.log('üëã ‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô!');
                    this.client.disconnect();
                    process.exit(0);
                    break;
                    
                default:
                    if (command) {
                        console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${command}`);
                        console.log('üí° ‡∏û‡∏¥‡∏°‡∏û‡πå "help" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ');
                    }
            }
            
            this.rl.prompt();
        });
        
        this.rl.on('close', () => {
            console.log('\nüëã ‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô!');
            this.client.disconnect();
            process.exit(0);
        });
    }
}

// Export ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô
module.exports = { UniversalDataClient, UniversalDataCLI };

// ‡∏ñ‡πâ‡∏≤‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
    const cli = new UniversalDataCLI();
    cli.start();
}