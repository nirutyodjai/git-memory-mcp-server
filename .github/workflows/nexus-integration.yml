name: NEXUS IDE Integration Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run integration tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Test Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - development
      run_performance_tests:
        description: 'Run Performance Tests'
        required: false
        default: true
        type: boolean
      deploy_to_nexus:
        description: 'Deploy to NEXUS IDE'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  NEXUS_API_VERSION: '2.0'
  TEST_TIMEOUT: '300000'
  INTEGRATION_TEST_PORT: '0'

jobs:
  # Pre-flight checks
  preflight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      should_run_tests: ${{ steps.check.outputs.should_run }}
      test_environment: ${{ steps.check.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check if tests should run
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.test_environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Get version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Validate configuration
        run: |
          npm run prd:validate
          node -e "console.log('‚úÖ Configuration validation passed')"

  # Build and prepare
  build:
    name: Build and Prepare
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.should_run_tests == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: |
          npm run build
          npm run build:types

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ needs.preflight.outputs.version }}
          path: |
            dist/
            build/
            *.tgz
          retention-days: 7

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [preflight, build]
    strategy:
      matrix:
        node-version: ['18', '20', '21']
        test-suite: ['basic', 'advanced', 'performance']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.preflight.outputs.version }}

      - name: Setup test environment
        run: |
          echo "Setting up test environment: ${{ needs.preflight.outputs.test_environment }}"
          cp nexus-integration.config.json nexus-integration.config.backup.json
          node -e "
            const config = require('./nexus-integration.config.json');
            config.environment = '${{ needs.preflight.outputs.test_environment }}';
            config.testing = true;
            require('fs').writeFileSync('nexus-integration.config.json', JSON.stringify(config, null, 2));
          "

      - name: Start test server
        run: |
          npm run start:test &
          sleep 10
          curl -f http://localhost:3000/health || exit 1
        env:
          NODE_ENV: test
          PORT: 3000

      - name: Run basic integration tests
        if: matrix.test-suite == 'basic'
        run: |
          npm run test:integration:basic
          npm run test:mcp
        timeout-minutes: 10

      - name: Run advanced integration tests
        if: matrix.test-suite == 'advanced'
        run: |
          npm run test:integration:advanced
          npm run test:git
          npm run test:memory
        timeout-minutes: 15

      - name: Run performance tests
        if: matrix.test-suite == 'performance' && (github.event.inputs.run_performance_tests == 'true' || github.event.inputs.run_performance_tests == '')
        run: |
          npm run test:performance
          npm run test:load
        timeout-minutes: 20

      - name: Generate test reports
        if: always()
        run: |
          npm run test:report
          mkdir -p test-results
          cp test-results.xml test-results/
          cp coverage/lcov.info test-results/ || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.node-version }}-${{ matrix.test-suite }}
          path: test-results/
          retention-days: 30

      - name: Restore configuration
        if: always()
        run: |
          mv nexus-integration.config.backup.json nexus-integration.config.json || true

  # Security and compliance tests
  security-tests:
    name: Security & Compliance Tests
    runs-on: ubuntu-latest
    needs: [preflight, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level=moderate
          npm run security:check || true

      - name: Run dependency check
        run: |
          npx license-checker --summary
          npx depcheck

      - name: Check for secrets
        run: |
          # Check for potential secrets in code
          grep -r -i "password\|secret\|key\|token" --include="*.js" --include="*.json" --exclude-dir=node_modules . || true
          echo "‚úÖ Secret scan completed"

      - name: Validate NEXUS integration security
        run: |
          node -e "
            const config = require('./nexus-integration.config.json');
            if (config.security && config.security.enabled) {
              console.log('‚úÖ Security configuration validated');
            } else {
              console.warn('‚ö†Ô∏è Security configuration not found');
            }
          "

  # NEXUS IDE deployment tests
  nexus-deployment-test:
    name: NEXUS IDE Deployment Test
    runs-on: ubuntu-latest
    needs: [preflight, build, integration-tests]
    if: needs.preflight.outputs.test_environment == 'production' || github.event.inputs.deploy_to_nexus == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.preflight.outputs.version }}

      - name: Test deployment preparation
        run: |
          npm run deploy:prepare
          npm run deploy:validate

      - name: Simulate NEXUS IDE deployment
        run: |
          echo "üöÄ Simulating deployment to NEXUS IDE..."
          npm run deploy:simulate
          echo "‚úÖ Deployment simulation completed"

      - name: Test NEXUS IDE integration endpoints
        run: |
          npm run start:test &
          sleep 10
          
          # Test NEXUS-specific endpoints
          curl -f http://localhost:3000/nexus/config
          curl -f http://localhost:3000/nexus/capabilities
          curl -f http://localhost:3000/nexus/deployment
          
          echo "‚úÖ NEXUS IDE endpoints validated"

      - name: Generate deployment report
        run: |
          npm run deploy:report
          echo "üìä Deployment report generated"

  # Monitoring and health checks
  monitoring-tests:
    name: Monitoring & Health Tests
    runs-on: ubuntu-latest
    needs: [preflight, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start monitoring test
        run: |
          npm run start:test &
          sleep 10
          
          # Start monitoring
          npm run monitor:fast &
          MONITOR_PID=$!
          sleep 30
          
          # Check monitoring status
          npm run monitor:status
          npm run monitor:report
          
          # Stop monitoring
          kill $MONITOR_PID || true
          
          echo "‚úÖ Monitoring tests completed"

      - name: Health check validation
        run: |
          npm run health:check
          npm run system:health
          echo "‚úÖ Health checks passed"

  # Results aggregation and reporting
  results:
    name: Test Results & Reporting
    runs-on: ubuntu-latest
    needs: [preflight, build, integration-tests, security-tests, nexus-deployment-test, monitoring-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: all-test-results/

      - name: Aggregate test results
        run: |
          echo "üìä Aggregating test results..."
          find all-test-results/ -name "*.xml" -o -name "*.json" | head -20
          
          # Count total tests
          TOTAL_TESTS=$(find all-test-results/ -name "*.xml" | wc -l)
          echo "Total test suites: $TOTAL_TESTS"
          
          echo "‚úÖ Test results aggregated"

      - name: Generate final report
        run: |
          cat > integration-report.md << EOF
          # NEXUS IDE Integration Test Report
          
          **Version:** ${{ needs.preflight.outputs.version }}
          **Environment:** ${{ needs.preflight.outputs.test_environment }}
          **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Commit:** ${{ github.sha }}
          
          ## Test Summary
          
          - ‚úÖ Pre-flight checks: Passed
          - ‚úÖ Build: Passed
          - ‚úÖ Integration tests: ${{ needs.integration-tests.result }}
          - ‚úÖ Security tests: ${{ needs.security-tests.result }}
          - ‚úÖ Deployment tests: ${{ needs.nexus-deployment-test.result }}
          - ‚úÖ Monitoring tests: ${{ needs.monitoring-tests.result }}
          
          ## Next Steps
          
          ${{ needs.integration-tests.result == 'success' && needs.security-tests.result == 'success' && 'üöÄ Ready for deployment to NEXUS IDE' || '‚ö†Ô∏è Issues found - review test results' }}
          
          EOF
          
          cat integration-report.md

      - name: Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: integration-report-${{ needs.preflight.outputs.version }}
          path: integration-report.md
          retention-days: 90

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('integration-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [results]
    if: always()
    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            console.log(`Found ${artifacts.data.artifacts.length} artifacts`);
            
            // Keep only the most recent artifacts
            const oldArtifacts = artifacts.data.artifacts.slice(10);
            
            for (const artifact of oldArtifacts) {
              try {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              } catch (error) {
                console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
              }
            }

      - name: Final status
        run: |
          echo "üéâ NEXUS IDE Integration Pipeline completed!"
          echo "üìä Check the integration report for detailed results"
          echo "üîó Artifacts and reports are available in the Actions tab"