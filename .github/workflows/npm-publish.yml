name: Publish to NPM

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.2.0)'
        required: true
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        registry-url: 'https://registry.npmjs.org'
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Run linting
      run: npm run lint || echo "Linting not configured"
    
    - name: Build package
      run: npm run build || echo "Build not required"
    
    - name: Check package contents
      run: npm pack --dry-run
    
    - name: Publish to NPM (Node.js 20.x only)
      if: matrix.node-version == '20.x'
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create GitHub Release Assets
      if: matrix.node-version == '20.x'
      run: |
        npm pack
        echo "Package created: $(ls *.tgz)"
    
    - name: Upload Release Asset
      if: matrix.node-version == '20.x' && github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./git-memory-mcp-server-${{ github.event.release.tag_name }}.tgz
        asset_name: git-memory-mcp-server-${{ github.event.release.tag_name }}.tgz
        asset_content_type: application/gzip

  notify:
    needs: publish
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.publish.result == 'success'
      run: |
        echo "‚úÖ Successfully published Git Memory MCP Server to NPM!"
        echo "üì¶ Package: git-memory-mcp-server"
        echo "üè∑Ô∏è Version: ${{ github.event.release.tag_name || github.event.inputs.version }}"
        echo "üîó NPM: https://www.npmjs.com/package/git-memory-mcp-server"
    
    - name: Notify Failure
      if: needs.publish.result == 'failure'
      run: |
        echo "‚ùå Failed to publish Git Memory MCP Server to NPM"
        echo "Please check the workflow logs for details"
        exit 1