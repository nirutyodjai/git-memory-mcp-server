name: Deploy to Production

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: 'false'
        type: boolean
      skip_backup:
        description: 'Skip creating backup'
        required: false
        default: 'false'
        type: boolean
      force_deploy:
        description: 'Force deployment even if checks fail'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run type checking
        run: npm run type-check
        
      - name: Run unit tests
        run: npm test -- --coverage
        
      - name: Run integration tests
        run: npm run test:integration
        
      - name: Security audit
        run: npm audit --audit-level moderate
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unittests
          fail_ci_if_error: true
          verbose: true
          
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    if: always() && needs.build.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped') && needs.build.result == 'success'
    environment:
      name: production
      url: https://gitmemory.comdee.co.th
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
          
      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts
          
      - name: Deploy to production server
        run: |
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            set -e
            
            # Navigate to deployment directory
            cd /opt/git-memory
            
            # Pull latest code
            git fetch origin
            git checkout ${{ github.sha }}
            
            # Set deployment flags
            DEPLOY_FLAGS=""
            if [[ "${{ inputs.skip_tests }}" == "true" ]]; then
              DEPLOY_FLAGS="$DEPLOY_FLAGS --skip-tests"
            fi
            if [[ "${{ inputs.skip_backup }}" == "true" ]]; then
              DEPLOY_FLAGS="$DEPLOY_FLAGS --skip-backup"
            fi
            if [[ "${{ inputs.force_deploy }}" == "true" ]]; then
              DEPLOY_FLAGS="$DEPLOY_FLAGS --force"
            fi
            
            # Run deployment script
            chmod +x scripts/deploy-production.sh
            ./scripts/deploy-production.sh $DEPLOY_FLAGS
          EOF
          
      - name: Verify deployment
        run: |
          # Wait for application to start
          sleep 30
          
          # Check health endpoint
          curl -f https://gitmemory.comdee.co.th/health || exit 1
          
          # Check API endpoint
          curl -f https://gitmemory.comdee.co.th/api/v1/health || exit 1
          
      - name: Run smoke tests
        run: |
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/git-memory
            npm run test:smoke
          EOF
          
      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🚀 Production deployment successful!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ Production deployment failed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure() && needs.deploy.result == 'failure'
    
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
          
      - name: Rollback deployment
        run: |
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/git-memory
            
            # Get previous deployment tag
            PREVIOUS_TAG=$(git tag -l "production-*" | sort -V | tail -n 2 | head -n 1)
            
            if [[ -n "$PREVIOUS_TAG" ]]; then
              echo "Rolling back to $PREVIOUS_TAG"
              git checkout $PREVIOUS_TAG
              docker-compose -f docker-compose.production.yml up -d --force-recreate
            else
              echo "No previous deployment found for rollback"
              exit 1
            fi
          EOF
          
      - name: Verify rollback
        run: |
          sleep 30
          curl -f https://gitmemory.comdee.co.th/health || exit 1
          
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: warning
          text: '⚠️ Production deployment rolled back due to failure'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}